{"idx":"MY772a4d2d-295c-4662-8ec7-ef11d9cf2f24","name":"analyst xml to xlsx","treename":"tree_xlm_to_analystxlsx","children":[{"idx":"MY98766ad9-adba-4027-92f9-789951ec9ec6","name":"main (201_make_ad_xlsx_from_xml.js)","custparents":[{"idx":"MY772a4d2d-295c-4662-8ec7-ef11d9cf2f24"},{"idx":"MY560435da-209e-47fa-a46a-ed112b78bc7b"}],"children":[{"idx":"MY97b36e6e-7ae1-4637-9747-736988eb16fd","name":"substeps","custparents":[{"idx":"MY98766ad9-adba-4027-92f9-789951ec9ec6"}],"children":[{"idx":"MY7010225d-7982-48f2-9972-3a6915e67560","name":"settings","custparents":[{"idx":"MY97b36e6e-7ae1-4637-9747-736988eb16fd"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// jsdom and jquery must be used together</div><div class=\"ql-code-block\">const jsdom = require(\"jsdom\");</div><div class=\"ql-code-block\">const { window } = new jsdom.JSDOM(`...`);</div><div class=\"ql-code-block\">var $ = require(\"jquery\")(window);</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// https://www.npmjs.com/package/adm-zip</div><div class=\"ql-code-block\">const AdmZip = require('adm-zip');</div><div class=\"ql-code-block\">const { config, setgroups } = require('process');</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">const beautify = require('beautify');</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// src and target file settings:</div><div class=\"ql-code-block\">// src path and file file name:</div><div class=\"ql-code-block\">const srcPath = 'data/in/do_not_git/research_doc/';</div><div class=\"ql-code-block\">const srcFile = '__rd.docx';</div><div class=\"ql-code-block\">const srcfilepath = srcPath + srcFile;//\"data/in/sample_a_src.file\";</div><div class=\"ql-code-block\">// target path</div><div class=\"ql-code-block\">const targetFilePath = 'data/out/';</div><div class=\"ql-code-block\">// targetFile name will be automatically named (srcFileName + '_totarget.file')</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// const targetfile = \"data/in/do_not_git/src and target samples/sample3_src.file\";</div><div class=\"ql-code-block\">// make a zip instance of the thesrc src file file</div><div class=\"ql-code-block\">const srczip = new AdmZip(srcfilepath);</div><div class=\"ql-code-block\">const targetzip = new AdmZip();</div></div><p>t///</p>"},{"idx":"MY9eafc119-d442-45a7-99cf-0b17b89da980","name":"make_xlsx()","custparents":[{"idx":"MY97b36e6e-7ae1-4637-9747-736988eb16fd"}],"children":[{"idx":"MY179f894c-b74b-49a3-831c-4b70cbacb965","name":"substeps","custparents":[{"idx":"MY9eafc119-d442-45a7-99cf-0b17b89da980"}],"children":[{"idx":"MY27af7e5a-7c71-4c56-b8bd-62524ff72997","name":"get xml script from src file, read_xml_from_src()","custparents":[{"idx":"MY179f894c-b74b-49a3-831c-4b70cbacb965"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">// get xml script from a src file</div><div class=\"ql-code-block\" data-language=\"plain\">async function read_xmls_from_src(srczip) {</div><div class=\"ql-code-block\" data-language=\"plain\">    /*** read the src file data </div><div class=\"ql-code-block\" data-language=\"plain\">        unlike handling docx file (which is to work on word/document.xml only), in an xlsx package there are </div><div class=\"ql-code-block\" data-language=\"plain\">        multiple (in this case 3) xml files to work on. These files are of two types: </div><div class=\"ql-code-block\" data-language=\"plain\">        1) the xl/sharedStrings.xml storing worksheet cell values, like:</div><div class=\"ql-code-block\" data-language=\"plain\">        &lt;si&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">            &lt;t&gt;Steps&lt;/t&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">        &lt;/si&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">        2) the xl/worksheets/sheet1.xml and sheet2.xml storing the cell address</div><div class=\"ql-code-block\" data-language=\"plain\">        &lt;row r=\"1\" spans=\"1:2\" x14ac:dyDescent=\"0.25\"&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">            &lt;c r=\"A1\" s=\"1\" t=\"s\"&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">                &lt;v&gt;0&lt;/v&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">            &lt;/c&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">        &lt;/row&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">        the number 0 within the v tag is corresponding to the index number of the si tag in the sharedStrings.xml</div><div class=\"ql-code-block\" data-language=\"plain\">        Thus, the cell \"A1\" (in this case, in sheet2) has a value of 'Steps'</div><div class=\"ql-code-block\" data-language=\"plain\">        Note that sharedStrings.xml stores values from all worksheets. The only link is the index number of the si tag</div><div class=\"ql-code-block\" data-language=\"plain\">    */</div><div class=\"ql-code-block\" data-language=\"plain\">    let xmlfiles_arr = ['xl/sharedStrings.xml', 'xl/worksheets/sheet1.xml', 'xl/worksheets/sheet2.xml']</div><div class=\"ql-code-block\" data-language=\"plain\">    let result = {}</div><div class=\"ql-code-block\" data-language=\"plain\">    for (let i = 0; i &lt; xmlfiles_arr.length; i++) {</div><div class=\"ql-code-block\" data-language=\"plain\">        thexmlfile = xmlfiles_arr[i]</div><div class=\"ql-code-block\" data-language=\"plain\">        // console.log('192', thexmlfile)</div><div class=\"ql-code-block\" data-language=\"plain\">        // 0. get the file name</div><div class=\"ql-code-block\" data-language=\"plain\">        let thexmlfilename = get_filename(thexmlfile).name</div><div class=\"ql-code-block\" data-language=\"plain\">        // console.log('194', thexmlfilename)</div><div class=\"ql-code-block\" data-language=\"plain\">        // 1. read the script of xl/sharedStrings.xml, xl/worksheets/sheet1.xml and xl/worksheets/sheet2.xml from srczip</div><div class=\"ql-code-block\" data-language=\"plain\">        let thesrcxmlfile_src = thexmlfile</div><div class=\"ql-code-block\" data-language=\"plain\">        let encoding = \"utf-8\"; // the srcxml is directly from an file file</div><div class=\"ql-code-block\" data-language=\"plain\">        let thesrcxmlstr_src = await srczip.readAsText(thesrcxmlfile_src, encoding);</div><div class=\"ql-code-block\" data-language=\"plain\">        // console.log('201:', thesrcxmlstr_src.substr(0, 300))</div><div class=\"ql-code-block\" data-language=\"plain\">        // 2. remove the head line '&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;', and clean the srcxml ()</div><div class=\"ql-code-block\" data-language=\"plain\">        let thebodyxmlstr_src = thesrcxmlstr_src.split('standalone=\"yes\"?&gt;')[1]</div><div class=\"ql-code-block\" data-language=\"plain\">        let thesrcxmlstr_src_cleaned = cleanxmlstr(thebodyxmlstr_src)</div><div class=\"ql-code-block\" data-language=\"plain\">        // console.log('246',thesrcxmlstr_src_cleaned)</div><div class=\"ql-code-block\" data-language=\"plain\">        // 3. make a jq for the cleaned src xml</div><div class=\"ql-code-block\" data-language=\"plain\">        let src_jq = $(thesrcxmlstr_src_cleaned)</div><div class=\"ql-code-block\" data-language=\"plain\">        // console.log('248', src_jq.prop('innerHTML'))</div><div class=\"ql-code-block\" data-language=\"plain\">        result[thexmlfilename] = { 'jq_src': src_jq, 'theoriginsrcxmlstr_src': thesrcxmlstr_src }</div><div class=\"ql-code-block\" data-language=\"plain\">    } // for (let i in xmlfiles_arr)</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">    // console.log('line47', src_jq)</div><div class=\"ql-code-block\" data-language=\"plain\">    return result //</div><div class=\"ql-code-block\" data-language=\"plain\">}; //async function read_xmls_from_src</div></div><p>t///</p>","children":[{"idx":"MY4c2d4d15-1e05-4163-a9ad-d68eb1c0001e","name":"init the si_index (the index for saving sharedStrings)","custparents":[{"idx":"MY27af7e5a-7c71-4c56-b8bd-62524ff72997"}],"children":[{"idx":"MYf5ca7c72-1b5c-49cc-9e9f-556c015ff59b","name":"make template of the sharedStrings xml","custparents":[{"idx":"MY4c2d4d15-1e05-4163-a9ad-d68eb1c0001e"}],"children":[{"idx":"MYda676667-3b76-48fd-8794-49c05c29940c","name":"make template of the credential xml (sheet1)","custparents":[{"idx":"MYf5ca7c72-1b5c-49cc-9e9f-556c015ff59b"}],"children":[{"idx":"MYa8261638-fb4e-44a0-a1df-657ea91d9960","name":"make template of the steps xml (sheet2)","custparents":[{"idx":"MYda676667-3b76-48fd-8794-49c05c29940c"}],"children":[{"idx":"MY44204976-1f24-41b5-990b-180ab9a31263","name":"finalize target xml code text (clean up and recover original names)","custparents":[{"idx":"MYa8261638-fb4e-44a0-a1df-657ea91d9960"}],"children":[{"idx":"MYf00ae02e-9a74-43bc-aa17-f5ad703e7c02","name":"make the target zip obj","custparents":[{"idx":"MY44204976-1f24-41b5-990b-180ab9a31263"}],"children":[{"idx":"MYa6de7bfc-2b9f-4cc4-a2a5-37fecd2560d6","name":"save the targetzip to local as the target xlsx","custparents":[{"idx":"MYf00ae02e-9a74-43bc-aa17-f5ad703e7c02"}]}],"collapsed":0,"_substeps":{"idx":"MYde1c20f8-4233-46fa-b590-0277fb3634fa","name":"substeps","custparents":[{"idx":"MYf00ae02e-9a74-43bc-aa17-f5ad703e7c02"}],"children":[{"idx":"MY4d8c68be-73e2-4ce7-9639-7c8a9123606a","name":"delete document.xml in the srczip and make a new one with the target xml code","custparents":[{"idx":"MYde1c20f8-4233-46fa-b590-0277fb3634fa"}],"children":[{"idx":"MY646b0331-8bbc-460c-b027-4d135d98654c","name":"make the target zip obj by copying all files from the srczip obj","custparents":[{"idx":"MY4d8c68be-73e2-4ce7-9639-7c8a9123606a"}],"collapsed":0}],"collapsed":0}]}}],"collapsed":0,"_substeps":{"idx":"MY888e3874-3f40-4e23-8deb-7f46cf619a34","name":"substeps","custparents":[{"idx":"MY44204976-1f24-41b5-990b-180ab9a31263"}],"children":[{"idx":"MY8b0b1b76-6d2c-4513-8ff0-4f1965411e2d","name":"loop for the sharedStrings and sheet xmls, clean the src xml text (so as to get tag names and attribute names in original case form): cleanxmlstr()","custparents":[{"idx":"MY888e3874-3f40-4e23-8deb-7f46cf619a34"}],"collapsed":0,"children":[{"idx":"MY621c0960-b2b7-449e-b31f-128d04969e7f","name":"clean up the target xml cleanup_targetxml()","custparents":[{"idx":"MY8b0b1b76-6d2c-4513-8ff0-4f1965411e2d"},{"idx":"MY8b0b1b76-6d2c-4513-8ff0-4f1965411e2d"}],"collapsed":0,"children":[{"idx":"MYaf405818-92ab-4fbb-8aba-5816203d597d","name":"save beautified target xml as a file saveLocalTxtFile()","custparents":[{"idx":"MY621c0960-b2b7-449e-b31f-128d04969e7f"},{"idx":"MY621c0960-b2b7-449e-b31f-128d04969e7f"}]}]}]}]}}],"_substeps":{"idx":"c024c53d-b435-4388-bea8-c506f4388485","name":"substeps","custparents":[{"idx":"MYa8261638-fb4e-44a0-a1df-657ea91d9960"}],"children":[{"idx":"310cf4dd-734f-42fd-88e2-02768cb7de15","name":"make rows and cells: wxo()","custparents":[{"idx":"c024c53d-b435-4388-bea8-c506f4388485"}],"children":[{"idx":"75a1db8b-2980-4c99-b6ab-118beba856b4","name":"update sharedStrings: wxo()","custparents":[{"idx":"310cf4dd-734f-42fd-88e2-02768cb7de15"}]}]}]}}],"_substeps":{"idx":"MY2fa7c6ad-27ad-421c-95b0-24354d9a9da6","name":"substeps","custparents":[{"idx":"MYda676667-3b76-48fd-8794-49c05c29940c"}],"children":[{"idx":"MY16fa28d8-5a08-4d23-871b-bc618245f4b8","name":"make rows and cells: wxo()","custparents":[{"idx":"MY2fa7c6ad-27ad-421c-95b0-24354d9a9da6"}],"children":[{"idx":"MY728eac40-4af9-4479-b699-5daa61fd4489","name":"update sharedStrings: wxo()","custparents":[{"idx":"MY16fa28d8-5a08-4d23-871b-bc618245f4b8"}]}]}],"oldparentidx":"MYda676667-3b76-48fd-8794-49c05c29940c"}}]}]}],"collapsed":0,"_substeps":{"idx":"MYd03498b8-d3f2-4886-84cf-cc31e1d57bfa","name":"substeps","custparents":[{"idx":"MY27af7e5a-7c71-4c56-b8bd-62524ff72997"}],"children":[{"idx":"MYc94c2bbd-df58-41e6-ab82-75038ac3d6ab","name":"0. get the file name from the string with fullpath and filename: get_filename()","custparents":[{"idx":"MYd03498b8-d3f2-4886-84cf-cc31e1d57bfa"}],"children":[{"idx":"MYb70988ad-d78a-4fdc-bd3e-810fdfff7a77","name":"1. read multiple xml files (forsharedStrings and sheets) from src zip","custparents":[{"idx":"MYc94c2bbd-df58-41e6-ab82-75038ac3d6ab"}],"children":[{"idx":"MYe8052f88-f15f-43cc-9d16-78a8f2a66622","name":"2. for each xlm file, remove the headline of xml version and clean xml: cleanxmlstr()","custparents":[{"idx":"MYb70988ad-d78a-4fdc-bd3e-810fdfff7a77"}],"children":[{"idx":"MY27297d9c-0a0b-45e7-9cff-bdfb7e858faf","name":"3. make a jQuery object of the cleaned srcxml","custparents":[{"idx":"MYe8052f88-f15f-43cc-9d16-78a8f2a66622"}],"children":[{"idx":"MY02d5db38-cdde-462c-b043-99b55286ba09","name":"save the original src xml as a file saveLocalTxtFile()","custparents":[{"idx":"MY27297d9c-0a0b-45e7-9cff-bdfb7e858faf"}],"NodeDescription":"<p>///t</p><p>t///</p>"}]}]}]}]}]}}]}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// convert a update a xlsx file</div><div class=\"ql-code-block\">async function make_xlsx() {</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 1. get xml script and src_jq from a src file</div><div class=\"ql-code-block\">    let src_dict = await read_xmls_from_src(srczip)</div><div class=\"ql-code-block\">    // console.log('45:',  jq_src.prop('outerHTML').substr(0,500))</div><div class=\"ql-code-block\">    Object.keys(src_dict).forEach(async function (d) {</div><div class=\"ql-code-block\">        // jq_src, theoriginsrcxmlstr_src</div><div class=\"ql-code-block\">        // 1a. save the theoriginsrcxmlstr_src as a local file (for viewing the contents during coding)</div><div class=\"ql-code-block\">        let xmlfile_src = targetFilePath + '__src_' + d + '.xml'</div><div class=\"ql-code-block\">        let beautfied_theoriginsrcxmlstr_src = beautify(src_dict[d].theoriginsrcxmlstr_src, { format: 'xml' })</div><div class=\"ql-code-block\">        await saveLocalTxtFile(beautfied_theoriginsrcxmlstr_src, xmlfile_src, 'utf-8');</div><div class=\"ql-code-block\">    }) // Object.keys(src_xmls_dict).forEach</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 2. set the init index for the shared values</div><div class=\"ql-code-block\">    let si_index = 0</div><div class=\"ql-code-block\">    // working on the template of sheet1 (the 'credential' sheet)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 3. make template of the sharedStrings sheet</div><div class=\"ql-code-block\">    let body_jq_sharedStrings_src = src_dict['sharedStrings'].jq_src</div><div class=\"ql-code-block\">    // console.log('61', body_jq_sharedStrings_src.prop('outerHTML'))</div><div class=\"ql-code-block\">    body_jq_sharedStrings_src.empty()</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 4. make rows in the credential sheet (sheet1): make 4 rows, each with one cell, in which add a v tag with the si_index as the textcontent </div><div class=\"ql-code-block\">    let body_jq_sheet1_src = $(src_dict['sheet1'].jq_src.find('sheetData')[0])</div><div class=\"ql-code-block\">    body_jq_sheet1_src.empty()</div><div class=\"ql-code-block\">    let cellvalues_arr = ['Project', 'Created by', 'Last modified on']</div><div class=\"ql-code-block\">    // make the row jq</div><div class=\"ql-code-block\">    for (let i = 1; i &lt; 4; i++) {</div><div class=\"ql-code-block\">        let row_jq = new wxo('row', { \"r\": parseInt(i), \"spans\": \"1:1\", \"x14ac:dyDescent\": \"0.25\" }).make().appendto(body_jq_sheet1_src)</div><div class=\"ql-code-block\">        let cell_jq = new wxo('c', { \"r\": \"A\" + parseInt(i), \"s\": \"1\", \"t\": \"s\" }).make().appendto(row_jq)</div><div class=\"ql-code-block\">        let v_cell_jq = new wxo('v', { si_index: parseInt(si_index) }, null, si_index).make().appendto(cell_jq)</div><div class=\"ql-code-block\">        // let v_cell_jq = new wxo('v', null, null, si_index).make().appendto(cell_jq)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // add the corresponding string values to body_jq_sharedStrings_src</div><div class=\"ql-code-block\">        let si_jq = new wxo('si', { si_index: parseInt(si_index) }).make().appendto(body_jq_sharedStrings_src)</div><div class=\"ql-code-block\">        let t_qj = new wxo('t', { si_index: parseInt(si_index) }, null, cellvalues_arr[i - 1]).make().appendto(si_jq)</div><div class=\"ql-code-block\">        // update the count number in &lt;sst&gt;</div><div class=\"ql-code-block\">        body_jq_sharedStrings_src.attr('count', parseInt(si_index+1))</div><div class=\"ql-code-block\">        body_jq_sharedStrings_src.attr('uniquecount', parseInt(si_index+1))</div><div class=\"ql-code-block\">        si_index++</div><div class=\"ql-code-block\">    }// for (let i = 1; i&lt;4;i++)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 5. make rows in the steps sheet (sheet2): make 1 rows  with 5 cells, in each add a v tag with the si_index as the textcontent </div><div class=\"ql-code-block\">    let body_jq_sheet2_src = $(src_dict['sheet2'].jq_src.find('sheetData')[0])</div><div class=\"ql-code-block\">    body_jq_sheet2_src.empty()</div><div class=\"ql-code-block\">    cellvalues_arr = ['Steps', 'Task', 'SAS Macros and other inputs', 'Source Code File', 'Output File']</div><div class=\"ql-code-block\">    // make the row jq</div><div class=\"ql-code-block\">    let row_jq = new wxo('row', { \"r\": \"1\", \"spans\": \"1:5\",  \"s\":\"1\", \"customFormat\":\"1\", \"x14ac:dyDescent\": \"0.25\" }).make().appendto(body_jq_sheet2_src)</div><div class=\"ql-code-block\">    for (let i = 1; i &lt; 6; i++) {</div><div class=\"ql-code-block\">        let cell_jq = new wxo('c', { \"r\": String.fromCharCode(i + 64) + \"1\", \"s\": \"1\", \"t\": \"s\" }).make().appendto(row_jq)</div><div class=\"ql-code-block\">        let v_cell_jq = new wxo('v', { si_index: parseInt(si_index) }, null, si_index).make().appendto(cell_jq)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // add the corresponding string values to body_jq_sharedStrings_src</div><div class=\"ql-code-block\">        let si_jq = new wxo('si', { si_index: parseInt(si_index) }).make().appendto(body_jq_sharedStrings_src)</div><div class=\"ql-code-block\">        let t_qj = new wxo('t', { si_index: parseInt(si_index) }, null, cellvalues_arr[i - 1]).make().appendto(si_jq)</div><div class=\"ql-code-block\">        // update the count number in &lt;sst&gt;</div><div class=\"ql-code-block\">        body_jq_sharedStrings_src.attr('count', parseInt(si_index+1))</div><div class=\"ql-code-block\">        body_jq_sharedStrings_src.attr('uniquecount', parseInt(si_index+1))</div><div class=\"ql-code-block\">        si_index++</div><div class=\"ql-code-block\">    }// for (let i = 1; i&lt;6;i++)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 6. clean up the target xml</div><div class=\"ql-code-block\">    for (let i=0; i&lt;Object.keys(src_dict).length; i++){</div><div class=\"ql-code-block\">        </div><div class=\"ql-code-block\">        let d = Object.keys(src_dict)[i]</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // finalize the xml code text (clean up the target xml code)</div><div class=\"ql-code-block\">        // 6a the src xml need to be cleaned as well before making the original tagname dict in cleanup_targetxml</div><div class=\"ql-code-block\">        let thesrcxmlstr_cleaned2 = src_dict[d].theoriginsrcxmlstr_src.split('?&gt;')[1]</div><div class=\"ql-code-block\">        thesrcxmlstr_cleaned2 = thesrcxmlstr_cleaned2.replace(/\\&gt;/g, '&gt;\\n')</div><div class=\"ql-code-block\">        thesrcxmlstr_cleaned2 = cleanxmlstr(thesrcxmlstr_cleaned2)</div><div class=\"ql-code-block\">        // console.log('120', src_dict[d].jq_src.prop('outerHTML'))</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // 6b clean up the target xml (recover the orignal tagname and attr name, etc)</div><div class=\"ql-code-block\">        let xmlstr_target_cleaned = await cleanup_targetxml(src_dict[d].jq_src, thesrcxmlstr_cleaned2)</div><div class=\"ql-code-block\">        // console.log('122', xmlstr_target_cleaned)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // console.log('124', xmlstr_target_cleaned.substr(530, 50))</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // 6c. save beatufied target xml</div><div class=\"ql-code-block\">        xmlstr_target = '&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?&gt;\\n' + xmlstr_target_cleaned</div><div class=\"ql-code-block\">        src_dict[d].xmlstr_target = xmlstr_target</div><div class=\"ql-code-block\">        // console.log('121', src_dict[d])</div><div class=\"ql-code-block\">        xmlstr_target_beautified = beautify(xmlstr_target, { format: 'xml' })</div><div class=\"ql-code-block\">        let xmlfile_target = targetFilePath + '__target_' + d + '.xml'</div><div class=\"ql-code-block\">        await saveLocalTxtFile(xmlstr_target_beautified, xmlfile_target, 'utf-8');</div><div class=\"ql-code-block\">    } // loop for each Object.keys(src_xmls_dict)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // console.log('126', src_dict['sheet1'].xmlstr_target)</div><div class=\"ql-code-block\">    // 7. make the targetzip obj</div><div class=\"ql-code-block\">    // do not beautify the target xml file as it'll add line breakers to the textcontent!</div><div class=\"ql-code-block\">    let xmlfiles_arr = ['xl/sharedStrings.xml', 'xl/worksheets/sheet1.xml', 'xl/worksheets/sheet2.xml']</div><div class=\"ql-code-block\">    for (let i=0; i&lt;xmlfiles_arr.length; i++){</div><div class=\"ql-code-block\">        let d = xmlfiles_arr[i]</div><div class=\"ql-code-block\">        let thexmlfilename = get_filename(d).name</div><div class=\"ql-code-block\">        // console.log('134', thexmlfilename)</div><div class=\"ql-code-block\">        srczip.deleteFile(d)</div><div class=\"ql-code-block\">        // console.log('136', src_dict[thexmlfilename])</div><div class=\"ql-code-block\">        srczip.addFile(d, Buffer.from(src_dict[thexmlfilename].xmlstr_target, \"utf-8\"))</div><div class=\"ql-code-block\">    }// for (let i=0; i&lt;xmlfiles_arr.length; i++)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 8. the amd-zip has a bug that theZip object (created from a zip) has error local header when using .toBuffer()</div><div class=\"ql-code-block\">    // when saving theZip to a local file (e.g., theZip.writeZip(), the files within the written zip can be corrupted)</div><div class=\"ql-code-block\">    // the work around is to migrate the files into a new zip! </div><div class=\"ql-code-block\">    let zipEntries = await srczip.getEntries()</div><div class=\"ql-code-block\">    for (let i = 0; i &lt; zipEntries.length; i++) {</div><div class=\"ql-code-block\">        let d = zipEntries[i]</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // read each file into a str</div><div class=\"ql-code-block\">        let thefilestr = await srczip.readAsText(d.entryName, 'utf-8')</div><div class=\"ql-code-block\">        // console.log(thefilestr.substring(0,10))</div><div class=\"ql-code-block\">        await targetzip.addFile(d.entryName, Buffer.from(thefilestr, \"utf-8\"))</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 9 save the targetzip obj as the target xlsx</div><div class=\"ql-code-block\">    //determine the name of the target file.</div><div class=\"ql-code-block\">    let target_filename = '__ad'</div><div class=\"ql-code-block\">    // console.log ('99', target_filename)</div><div class=\"ql-code-block\">    // save the target file. await targetzip.writeZip(\"data/out/\" + config_project.Element.Label + \"_totarget.file\")</div><div class=\"ql-code-block\">    await targetzip.writeZip(targetFilePath + target_filename + \"_target.xlsx\")</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">}; //async function make_xlsx()</div></div><p>t///</p>","collapsed":1}]}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">/* To update a word docx file according to the template */</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// jsdom and jquery must be used together</div><div class=\"ql-code-block\">const jsdom = require(\"jsdom\");</div><div class=\"ql-code-block\">const { window } = new jsdom.JSDOM(`...`);</div><div class=\"ql-code-block\">var $ = require(\"jquery\")(window);</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// https://www.npmjs.com/package/adm-zip</div><div class=\"ql-code-block\">const AdmZip = require('adm-zip');</div><div class=\"ql-code-block\">const { config, setgroups } = require('process');</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">const beautify = require('beautify');</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// src and target file settings:</div><div class=\"ql-code-block\">// src path and file file name:</div><div class=\"ql-code-block\">const srcPath = 'data/in/do_not_git/research_doc/';</div><div class=\"ql-code-block\">const srcFile = '__rd.docx';</div><div class=\"ql-code-block\">const srcfilepath = srcPath + srcFile;//\"data/in/sample_a_src.file\";</div><div class=\"ql-code-block\">// target path</div><div class=\"ql-code-block\">const targetFilePath = 'data/out/';</div><div class=\"ql-code-block\">// targetFile name will be automatically named (srcFileName + '_totarget.file')</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// const targetfile = \"data/in/do_not_git/src and target samples/sample3_src.file\";</div><div class=\"ql-code-block\">// make a zip instance of the thesrc src file file</div><div class=\"ql-code-block\">const srczip = new AdmZip(srcfilepath);</div><div class=\"ql-code-block\">const targetzip = new AdmZip();</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">(async () =&gt; {</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // make a docx</div><div class=\"ql-code-block\">    await make_docx();</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">})()</div></div><p>t///</p>","collapsed":0},{"idx":"MY719ccc5e-0ccd-4bd8-bd3e-5d3d99da3de3","name":"repeatedly used modules","custparents":[{"idx":"MY772a4d2d-295c-4662-8ec7-ef11d9cf2f24"},{"idx":"MY560435da-209e-47fa-a46a-ed112b78bc7b"}],"children":[{"idx":"MY6b6a1283-871a-407a-87ed-4c5572f454cb","name":"for editing xml","custparents":[{"idx":"MY719ccc5e-0ccd-4bd8-bd3e-5d3d99da3de3"}],"children":[{"idx":"MYc4bb9b82-1f2c-463f-b718-dfdc9fe79931","name":"cleanxmlstr()","custparents":[{"idx":"MY6b6a1283-871a-407a-87ed-4c5572f454cb"},{"idx":"MYe8052f88-f15f-43cc-9d16-78a8f2a66622"},{"idx":"MY8b0b1b76-6d2c-4513-8ff0-4f1965411e2d"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// clean up the xmlstr</div><div class=\"ql-code-block\">function cleanxmlstr(thexmlstr) {</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // to cleanup the nonprintable chars</div><div class=\"ql-code-block\">    // let thexmlstr_remove_nonprintable = thexmlstr.replace(/[^\\x20-\\x7E\\s\\S]+/g, \"\")</div><div class=\"ql-code-block\">    let thexmlstr_remove_nonprintable = thexmlstr</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // the xmlstr is messed up with strange chars like &amp;amp;lt; &amp;lt;, etc</div><div class=\"ql-code-block\">    // The following is to change &amp;amp;lt to &lt;, &amp;gt to &gt; ...</div><div class=\"ql-code-block\">    // let thesrcxmlstr_ampersand_code_normalized = normalize_ampersand_code(thexmlstr_remove_nonprintable)</div><div class=\"ql-code-block\">    // Note: second thought! do not convert ampersand symbols. These ampersand symbols are necessary for SAS file to identify settings within an xml tag from xmltag</div><div class=\"ql-code-block\">    // for example within &lt;DNA&gt;  &lt;/DNA&gt;, the html '&amp;lt;DNA...&amp;gt;DNA' has special meanings for SAS EG to identify (in this case, to identify the setting for location of an external file)</div><div class=\"ql-code-block\">    // If the ampersand code '&amp;lt;' is converted, SAS EG will wrongly consider it as an xml tag, and ignore the settings.  </div><div class=\"ql-code-block\">    let thesrcxmlstr_ampersand_code_normalized = thexmlstr_remove_nonprintable</div><div class=\"ql-code-block\">    // console.log('79:', thesrcxmlstr_ampersand_code_normalized)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // the xhtml self-colsing tags like &lt;Parameters /&gt; must be converted to &lt;Parameters&gt;&lt;/Parameters&gt;</div><div class=\"ql-code-block\">    // because the JSDOM does not read &lt;Parameters /&gt; well, it'll mess up the nested structure!</div><div class=\"ql-code-block\">    /**</div><div class=\"ql-code-block\">      e.g., the structure is like</div><div class=\"ql-code-block\">     &lt;Parameters /&gt;</div><div class=\"ql-code-block\">     &lt;ExecutionTimeSpan&gt;-P10675199DT2H48M5.4775808S&lt;/ExecutionTimeSpan&gt;</div><div class=\"ql-code-block\"> </div><div class=\"ql-code-block\">     JSDOM wrongly treat it as </div><div class=\"ql-code-block\">     &lt;Parameters&gt;</div><div class=\"ql-code-block\">        &lt;ExecutionTimeSpan&gt;-P10675199DT2H48M5.4775808S&lt;/ExecutionTimeSpan&gt;</div><div class=\"ql-code-block\">     &lt;/Parameters&gt;</div><div class=\"ql-code-block\">     1. the following is to convert  &lt;Parameters /&gt; to &lt;Parameters&gt;&lt;/Parameters&gt;</div><div class=\"ql-code-block\">     */</div><div class=\"ql-code-block\">     let thesrcxmlstr_selfclosing_converted = convertSelfClosingHTML_to_OldSchoolHTML(thesrcxmlstr_ampersand_code_normalized)</div><div class=\"ql-code-block\">    //  console.log('287', thesrcxmlstr_selfclosing_converted)</div><div class=\"ql-code-block\">    </div><div class=\"ql-code-block\">    // Note: change self closing tags must precede renaming col to col123</div><div class=\"ql-code-block\">    // otherwise the col tag is &lt;col /&gt; which cannot be recoginzed by the convert self closing function</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 2. jsdom does not handle the tag &lt;Table&gt;A&lt;/Table&gt; &lt;col&gt;&lt;col&gt; well</div><div class=\"ql-code-block\">    // In that case, it alters the html to '&lt;Table&gt;&lt;/Table&gt;A' !</div><div class=\"ql-code-block\">    // The following is to rename the tag &lt;col&gt; to &lt;col123&gt; to work around</div><div class=\"ql-code-block\">    let thesrcxmlstr_rename_col_col123 = rename_tag_named_col(thesrcxmlstr_selfclosing_converted)</div><div class=\"ql-code-block\">    // console.log('297', thesrcxmlstr_rename_col_col123)   </div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    //3. remove the comments (code within &lt;!--  and --&gt;)</div><div class=\"ql-code-block\">    let thesrcxmlstr_removecomments = removecomments(thesrcxmlstr_rename_col_col123)</div><div class=\"ql-code-block\">    // console.log(thesrcxmlstr_removecomments)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    return thesrcxmlstr_removecomments</div><div class=\"ql-code-block\">}; //function cleanxmlstr(thexmlstr) </div></div><p>t///</p>","children":[],"_substeps":{"idx":"MY34f8ccc2-e42f-4cfb-bd3e-39b6a710ea31","name":"substeps","custparents":[{"idx":"MYc4bb9b82-1f2c-463f-b718-dfdc9fe79931"}],"children":[{"idx":"MY0572d293-c88a-46f8-b7fd-f82b6914c40e","name":"convert self closing tags convertSelfClosingHTML_ to_OldSchoolHTML()","custparents":[{"idx":"MY34f8ccc2-e42f-4cfb-bd3e-39b6a710ea31"}],"NodeDescription":"<p>///t</p><p><br></p><p>t///</p>","children":[{"idx":"MY125e6b38-fcd2-48f4-8a37-63f849eeabac","name":"rename Table tags rename_tag_ named_col()","custparents":[{"idx":"MY0572d293-c88a-46f8-b7fd-f82b6914c40e"}],"NodeDescription":"<p>///t</p><p><br></p><p>t///</p>","children":[{"idx":"MY56a89687-8900-4010-b3e5-8d0bb089509f","name":"remove comments removecommets()","custparents":[{"idx":"MY125e6b38-fcd2-48f4-8a37-63f849eeabac"}],"NodeDescription":"<p>///t</p><p>t///</p>"}]}],"collapsed":0}]}},{"idx":"MYf51fdafa-6270-4138-9b36-431de5b0fbf2","name":"cleanup_targetxml()","custparents":[{"idx":"MY6b6a1283-871a-407a-87ed-4c5572f454cb"},{"idx":"MY621c0960-b2b7-449e-b31f-128d04969e7f"}],"children":[],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// clean up the target xml (e.g., convert standardized tag names and attribute names to original case form, etc)</div><div class=\"ql-code-block\">async function cleanup_targetxml(_jq, thesrcxmlstr_cleaned) {</div><div class=\"ql-code-block\">    // 1. get the modified xmlstr</div><div class=\"ql-code-block\">    let modified_xmlstr = _jq.prop('outerHTML')</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // change tag col123 to col</div><div class=\"ql-code-block\">    modified_xmlstr=modified_xmlstr.replace(/\\&lt;col123 /g, '&lt;col ')</div><div class=\"ql-code-block\">    modified_xmlstr=modified_xmlstr.replace(/\\&lt;\\/col123\\&gt;/g, '&lt;/col&gt;')</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 2. the program does not work well in identifying the tag names if there are two tags in a line</div><div class=\"ql-code-block\">    // the following is to force line breaking between two tags. </div><div class=\"ql-code-block\">    // the forced line breakers are with special marks ('___123456___')</div><div class=\"ql-code-block\">    // that way, after identifying the tag names, the target xml will be recovered to the original layout by removing these marked line breakers</div><div class=\"ql-code-block\">    modified_xmlstr = modified_xmlstr.replace(/\\&gt;/g, '&gt;\\n___123456___\\n')</div><div class=\"ql-code-block\">    // console.log('133', modified_xmlstr)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 3a. make a dictionary to map out the standardized and original tagnames</div><div class=\"ql-code-block\">    let originalTagnames_dict_crude = getOriginalTagNames_dict_crude(thesrcxmlstr_cleaned)</div><div class=\"ql-code-block\">    originalTagnames_dict_crude = { ...originalTagnames_dict_crude, ...{ 'W:TRPR': 'w:trPr' } }</div><div class=\"ql-code-block\">    // console.log('140', originalTagnames_dict_crude)</div><div class=\"ql-code-block\">    // 3b. make a dictionary to map out the standardized and original attribute names</div><div class=\"ql-code-block\">    let originalAttrNames_dict_crude = getOriginalAttrNames_dict_crude(thesrcxmlstr_cleaned)</div><div class=\"ql-code-block\">    // console.log('145', originalAttrNames_dict_crude)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 4a. replacce the standardized tagnames (all in uppercase) to original names</div><div class=\"ql-code-block\">    Object.keys(originalTagnames_dict_crude).forEach(d =&gt; {</div><div class=\"ql-code-block\">        let theoriginal = originalTagnames_dict_crude[d]</div><div class=\"ql-code-block\">        let regEx_normalized1 = new RegExp('\\&lt;' + d.toLowerCase() + '\\x20', 'g')</div><div class=\"ql-code-block\">        let regEx_normalized2 = new RegExp('\\&lt;' + d.toLowerCase() + '\\&gt;', 'g')</div><div class=\"ql-code-block\">        let regEx_normalized3 = new RegExp('\\&lt;\\/' + d.toLowerCase() + '&gt;', 'g')</div><div class=\"ql-code-block\">        modified_xmlstr = modified_xmlstr.replace(regEx_normalized1, '&lt;' + theoriginal + ' ')</div><div class=\"ql-code-block\">        modified_xmlstr = modified_xmlstr.replace(regEx_normalized2, '&lt;' + theoriginal + '&gt;')</div><div class=\"ql-code-block\">        modified_xmlstr = modified_xmlstr.replace(regEx_normalized3, '&lt;/' + theoriginal + '&gt;')</div><div class=\"ql-code-block\">    })</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 4b. replace the standardized attribute names (all in lowercase) to original names</div><div class=\"ql-code-block\">    Object.keys(originalAttrNames_dict_crude).forEach(d =&gt; {</div><div class=\"ql-code-block\">        let theoriginal = originalAttrNames_dict_crude[d]</div><div class=\"ql-code-block\">        let regEx_normalized1 = new RegExp(d.toLowerCase() + '=', 'g')</div><div class=\"ql-code-block\">        modified_xmlstr = modified_xmlstr.replace(regEx_normalized1, theoriginal + '=')</div><div class=\"ql-code-block\">    })</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 5. remove the '\\n___123456___\\n'</div><div class=\"ql-code-block\">    modified_xmlstr = modified_xmlstr.replace(/\\n___123456___\\n/g, '')</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    return modified_xmlstr</div><div class=\"ql-code-block\">}; //async function cleanup_targetxml()</div></div><p>t///</p>","_substeps":{"idx":"MY5e280330-3e46-4a12-8984-279a9578b46e","name":"substeps","custparents":[{"idx":"MYf51fdafa-6270-4138-9b36-431de5b0fbf2"}],"children":[{"idx":"MY954671cd-6409-4598-a962-3aaca4902a77","name":"get the xml string from the input jQuery object (_jq)","custparents":[{"idx":"MY5e280330-3e46-4a12-8984-279a9578b46e"}],"children":[{"idx":"MY86e630d1-2319-4165-85a6-ff5368d30346","name":"change the tag col123 to col","custparents":[{"idx":"MY954671cd-6409-4598-a962-3aaca4902a77"}],"children":[{"idx":"MYa3cb92f4-976d-4624-ac82-99732f3fe3fa","name":"force to change line after tag end (jQuery does not perform well if two tags are in the same line)","custparents":[{"idx":"MY86e630d1-2319-4165-85a6-ff5368d30346"}],"children":[{"idx":"MY0f777c4f-7462-4872-b146-621e57ef7883","name":"dictionary of tagnames (normalized to original) getOriginalTagNames_ dict_crude()","custparents":[{"idx":"MYa3cb92f4-976d-4624-ac82-99732f3fe3fa"}],"children":[{"idx":"MYdbbdc475-9a80-456c-9368-7c2fa5c56abd","name":"add new tagnames into the dictionary of tagnames","custparents":[{"idx":"MY0f777c4f-7462-4872-b146-621e57ef7883"}],"children":[{"idx":"MY51ad67c5-c00a-4774-9c3d-d088ad3fe501","name":"in the xml from the jQuery obj (the modified target xml), replace normalized tag names with original case","custparents":[{"idx":"MYdbbdc475-9a80-456c-9368-7c2fa5c56abd"},{"idx":"MY6e30c418-df23-429b-a2ef-5f0b21200f1c"}],"children":[{"idx":"MY9d15a9cc-f23f-43e2-8334-12fd66f45b32","name":"in the xml from the jQuery obj (the modified target xml), replace normalized attribute names with original case","custparents":[{"idx":"MY51ad67c5-c00a-4774-9c3d-d088ad3fe501"}],"children":[{"idx":"MY52816036-a9df-4b44-80b8-7e818e8c08ae","name":"remove the link breakers for forcing to change line","custparents":[{"idx":"MY9d15a9cc-f23f-43e2-8334-12fd66f45b32"}]}]}]}]}]},{"idx":"MY6e30c418-df23-429b-a2ef-5f0b21200f1c","name":"dictionary of attribute (normalized to original) getOriginalAttrNames_ dict_crude()","custparents":[{"idx":"MYa3cb92f4-976d-4624-ac82-99732f3fe3fa"}]}]}]}]}]}},{"idx":"MYfc4fe24a-0bcc-4106-8a94-670a2d77555e","name":"getOriginalTagNames_ dict_crude()","custparents":[{"idx":"MY6b6a1283-871a-407a-87ed-4c5572f454cb"},{"idx":"MY0f777c4f-7462-4872-b146-621e57ef7883"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// get a list of tagnames in original case form</div><div class=\"ql-code-block\">// it is _crude as it contains tag like strings in submitted code (e.g., '&lt;note!&gt;' in submitted code '/*&lt;note!&gt; the dat set need to be sorted first!*/)</div><div class=\"ql-code-block\">function getOriginalTagNames_dict_crude(thexhmlstr) {</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    let orignalTagnames_dict = {}</div><div class=\"ql-code-block\">    // get strings between '&lt;/' and '&gt;', or between '&lt;' and '/&gt;'</div><div class=\"ql-code-block\">    // the matchAll returns all instances match a regexpress pattern, note: must use /g to indicate for repeating search</div><div class=\"ql-code-block\">    // the '...' in [... blabla] is to join the found instances into an array</div><div class=\"ql-code-block\">    // e.g., find all matched instances and join them into the array matched_arr1</div><div class=\"ql-code-block\">    let matched_arr1 = [...thexhmlstr.matchAll(/\\&lt;\\/(.*)\\&gt;/g)]</div><div class=\"ql-code-block\">    // console.log(\"line205\", matched_arr1[0])</div><div class=\"ql-code-block\">    let matched_arr2 = [...thexhmlstr.matchAll(/\\&lt;(.*) \\/\\&gt;/g)]</div><div class=\"ql-code-block\">    // console.log(\"matched_arr1\", matched_arr1.length)</div><div class=\"ql-code-block\">    // console.log(\"matched_arr2\", matched_arr2)</div><div class=\"ql-code-block\">    /** each element of the array is like the following, in which the second element is the text of the origianl tagname</div><div class=\"ql-code-block\">        ['&lt;Tag6 /&gt;','Tag6', ...]</div><div class=\"ql-code-block\">    */</div><div class=\"ql-code-block\">    // the following is to push such a second element into the final arr with distinct tagNames</div><div class=\"ql-code-block\">    matched_arr1.forEach(d =&gt; {</div><div class=\"ql-code-block\">        // console.log(d[1])</div><div class=\"ql-code-block\">        let theTag = d[1].split(' ')[0]</div><div class=\"ql-code-block\">        if (!Object.keys(orignalTagnames_dict).includes(theTag.toUpperCase())) {</div><div class=\"ql-code-block\">            orignalTagnames_dict[theTag.toUpperCase()] = theTag</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\">    })</div><div class=\"ql-code-block\">    matched_arr2.forEach(d =&gt; {</div><div class=\"ql-code-block\">        let theTag = d[1].split(' ')[0]</div><div class=\"ql-code-block\">        if (!Object.keys(orignalTagnames_dict).includes(theTag.toUpperCase())) {</div><div class=\"ql-code-block\">            orignalTagnames_dict[theTag.toUpperCase()] = theTag</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\">    })</div><div class=\"ql-code-block\">    return orignalTagnames_dict</div><div class=\"ql-code-block\">}; // function getOriginalTagNames(thexhmlstr)</div></div><p>t///</p>"},{"idx":"MY62d4c894-9064-46f3-9db8-dc6cd1e0e342","name":"getOriginalAttrNames_ dict_crude","custparents":[{"idx":"MY6b6a1283-871a-407a-87ed-4c5572f454cb"},{"idx":"MY6e30c418-df23-429b-a2ef-5f0b21200f1c"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// get a dict of attribute names in original case form like {\"egversion\":\"EGversion\"} (key is the normalized attribute name)</div><div class=\"ql-code-block\">// it is called _crude as it included strings in submitted code like \"a in the submitted code a=1;\"</div><div class=\"ql-code-block\">function getOriginalAttrNames_dict_crude(thexhmlstr) {</div><div class=\"ql-code-block\">    let orignalAttrnames_dict = {}</div><div class=\"ql-code-block\">    // get strings between ' ' and '='</div><div class=\"ql-code-block\">    // the matchAll returns all instances match a regexpress pattern, note: must use /g to indicate for repeating search</div><div class=\"ql-code-block\">    // the '...' in [... blabla] is to join the found instances into an array</div><div class=\"ql-code-block\">    // e.g., find all matched instances and join them into the array matched_arr1</div><div class=\"ql-code-block\">    // the regular express fails to identify strings betwen a white space and something</div><div class=\"ql-code-block\">    // for example: &lt;ProjectCollection EGVersion=\"8.1\" Type=\"...\"&gt;</div><div class=\"ql-code-block\">    // the expected matched strs are EGVersion=, and Type=</div><div class=\"ql-code-block\">    // however, the match returns ProjectCollection EGVersion=\"8.1\" Type= (two attributes are messed up in a single match result)</div><div class=\"ql-code-block\">    // let matched_arr1 = [...thexhmlstr.matchAll(/\\&lt;(.*)=/g)]</div><div class=\"ql-code-block\">    // To avoid it, thexhmlstr is splitted into segments by ' '</div><div class=\"ql-code-block\">    let thexhmlstr_segs = thexhmlstr.split(' ')</div><div class=\"ql-code-block\">    // that way, the EGVersion=\"8.1\" Type= are splitted into separate segments</div><div class=\"ql-code-block\">    // next, split each segment by = (if there is a = in the str) and select the first element of the split (e.g., for 'EGVersion=\"8.1\"', the first element of the split is 'EGVersion')</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    thexhmlstr_segs.forEach(d =&gt; {</div><div class=\"ql-code-block\">        if (d.includes('=')) {</div><div class=\"ql-code-block\">            let theAttrName = d.split('=')[0]</div><div class=\"ql-code-block\">            if (!Object.keys(orignalAttrnames_dict).includes(theAttrName.toLowerCase())) {</div><div class=\"ql-code-block\">                orignalAttrnames_dict[theAttrName.toLowerCase()] = theAttrName</div><div class=\"ql-code-block\">            }</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\">    }) // thexhmlstr_segs.forEach</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    return orignalAttrnames_dict</div><div class=\"ql-code-block\">}; // function getOriginalTagNames(thexhmlstr)</div></div><p>t///</p>"},{"idx":"MY1a55ccf1-dd0d-4d3d-a947-7ae35f37c54a","name":"rename_tag_ named_col()","custparents":[{"idx":"MY6b6a1283-871a-407a-87ed-4c5572f454cb"},{"idx":"MY125e6b38-fcd2-48f4-8a37-63f849eeabac"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// jsdom does not handle the tag &lt;col&gt;A&lt;/col&gt; well</div><div class=\"ql-code-block\">// In that case, it alters the html to '&lt;col&gt;&lt;/col&gt;A' !</div><div class=\"ql-code-block\">// The following is to rename the tag &lt;col&gt; to &lt;col123&gt; to work around</div><div class=\"ql-code-block\">function rename_tag_named_col(thestr) {</div><div class=\"ql-code-block\">    thestr = thestr.replace(/\\&lt;col\\&gt;/g, '&lt;col123&gt;')</div><div class=\"ql-code-block\">    thestr = thestr.replace(/\\&lt;col /g, '&lt;col123 ')</div><div class=\"ql-code-block\">    thestr = thestr.replace(/\\&lt;\\/col\\&gt;/g, '&lt;/col123&gt;')</div><div class=\"ql-code-block\">    // console.log('310', thestr)</div><div class=\"ql-code-block\">    return thestr</div><div class=\"ql-code-block\">}; // function rename_tag_named_col</div></div><p>t///</p>"},{"idx":"MY8df1ed23-0f6e-4c6a-a365-a060e86d0d68","name":"convertSelfClosingHTML_ to_OldSchoolHTML()","custparents":[{"idx":"MY6b6a1283-871a-407a-87ed-4c5572f454cb"},{"idx":"MY0572d293-c88a-46f8-b7fd-f82b6914c40e"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// convert &lt;Parameters /&gt; to &lt;Parameters&gt;&lt;/Parameters&gt;</div><div class=\"ql-code-block\">function convertSelfClosingHTML_to_OldSchoolHTML(str) {</div><div class=\"ql-code-block\">    let matched_arr = str.match(/\\&lt;(.*)\\/\\&gt;/)</div><div class=\"ql-code-block\">    // console.log('324', matched_arr.length)</div><div class=\"ql-code-block\">    if (matched_arr &amp;&amp; matched_arr.length &gt; 0) {</div><div class=\"ql-code-block\">        let seg1 = matched_arr[1].split('&lt;')</div><div class=\"ql-code-block\">        // sometimes the lastmatchedstr is like GitSourceControl GUID=\"x2K5fW8CFtZy3Ke7\"</div><div class=\"ql-code-block\">        // in that case, the part after the first whitespace (GUID=\"x2K5fW8CFtZy3Ke7\") should be excluded </div><div class=\"ql-code-block\">        let theLastMatchedStr = seg1[seg1.length - 1]</div><div class=\"ql-code-block\">        // console.log(theLastMatchedStr)</div><div class=\"ql-code-block\">        let theLastMatchedStr_tagName = theLastMatchedStr.split(' ')[0]</div><div class=\"ql-code-block\">        // console.log(theLastMatchedStr_tagName)</div><div class=\"ql-code-block\">        // replace &lt;Others /&gt; with &lt;Others&gt;&lt;/&lt;Others /&gt;</div><div class=\"ql-code-block\">        let xhtmlstr = \"&lt;\" + theLastMatchedStr + \"/&gt;\"</div><div class=\"ql-code-block\">        let htmlstr = \"&lt;\" + theLastMatchedStr + \"&gt;\" + \"&lt;/\" + theLastMatchedStr_tagName + \"&gt;\"</div><div class=\"ql-code-block\">        str = str.replace(xhtmlstr, htmlstr)</div><div class=\"ql-code-block\">        let matched_arr2 = str.match(/\\&lt;(.*)\\/\\&gt;/)</div><div class=\"ql-code-block\">        if (matched_arr2 &amp;&amp; matched_arr2.length &gt; 0) {</div><div class=\"ql-code-block\">            str = convertSelfClosingHTML_to_OldSchoolHTML(str)</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">    return str</div><div class=\"ql-code-block\">}; // function convertSelfClosingHTML_to_OldSchoolHTML(str...</div></div><p>t///</p>"},{"idx":"MY88718a9b-1b2c-47fd-aa2b-7841c3d39cb0","name":"removecomments()","custparents":[{"idx":"MY6b6a1283-871a-407a-87ed-4c5572f454cb"},{"idx":"MY56a89687-8900-4010-b3e5-8d0bb089509f"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// remmove comments</div><div class=\"ql-code-block\">function removecomments(thestr) {</div><div class=\"ql-code-block\">    let result = ''</div><div class=\"ql-code-block\">    // split str by '&lt;!--'</div><div class=\"ql-code-block\">    let segments = thestr.split('&lt;!--')</div><div class=\"ql-code-block\">    for (let i = 0; i &lt; segments.length; i++) {</div><div class=\"ql-code-block\">        if (segments[i].includes('--&gt;')) {</div><div class=\"ql-code-block\">            let theSeg = segments[i].split('--&gt;')[1]</div><div class=\"ql-code-block\">            result = result + theSeg</div><div class=\"ql-code-block\">        } else {</div><div class=\"ql-code-block\">            result = result + segments[i]</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">    return result</div><div class=\"ql-code-block\">}; //function removecomments</div></div><p>t///</p>"},{"idx":"MYdaa60882-b8e8-4ea9-ab4d-7868a5cfb8cf","name":"wxo()","custparents":[{"idx":"MY6b6a1283-871a-407a-87ed-4c5572f454cb"},{"idx":"MY2efdfc56-b3c0-4fcd-898e-69d2d38a6b00"},{"idx":"MY9a82bed8-5a2e-4933-b603-77b6bcb69040"},{"idx":"MY320e8e54-532d-4c52-adba-9d4a7c84698d"},{"idx":"MY841c28df-4fc7-472e-bef0-1697ca893cf2"},{"idx":"MY8a3059fd-2ce8-4d33-833c-f1d17249139b"},{"idx":"MYdddbd702-8427-45ad-b631-f272e8a4dc67"},{"idx":"MY71793b7b-879d-43fa-96ea-8ae5c7b5ce98"},{"idx":"MY35cf9556-4b7a-4cc4-889d-88bb36e9c3d9"},{"idx":"MYe2069221-bc5a-4b6f-8a18-7a93e52d5b46"},{"idx":"7cd0b7a3-8514-4ee0-80cd-44ab5484ad89"},{"idx":"MY9f95bc78-c744-4f84-b7b0-cdad2503f7c6"},{"idx":"MY16fa28d8-5a08-4d23-871b-bc618245f4b8"},{"idx":"MY728eac40-4af9-4479-b699-5daa61fd4489"},{"idx":"310cf4dd-734f-42fd-88e2-02768cb7de15"},{"idx":"75a1db8b-2980-4c99-b6ab-118beba856b4"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// make a word xml object (wxo)</div><div class=\"ql-code-block\">function wxo(tagname, attrs, html, text) {</div><div class=\"ql-code-block\">    this.tagname = tagname,</div><div class=\"ql-code-block\">        this.attrs = attrs,</div><div class=\"ql-code-block\">        this.html = html,</div><div class=\"ql-code-block\">        this.text = text,</div><div class=\"ql-code-block\">        this.make = function () {</div><div class=\"ql-code-block\">            let taghead = '&lt;' + this.tagname + '&gt;', tagend = '&lt;/' + this.tagname + '&gt;'</div><div class=\"ql-code-block\">            let theTag = taghead + tagend</div><div class=\"ql-code-block\">            let _jq = $(theTag)</div><div class=\"ql-code-block\">            if (this.html) { _jq.html(this.html) }</div><div class=\"ql-code-block\">            if (this.attrs) {</div><div class=\"ql-code-block\">                Object.keys(this.attrs).forEach(key =&gt; {</div><div class=\"ql-code-block\">                    _jq.attr(key, this.attrs[key])</div><div class=\"ql-code-block\">                })</div><div class=\"ql-code-block\">            } // if (this.attrs &amp;&amp; this.attrs.length &gt;0)</div><div class=\"ql-code-block\">            if (!(this.text === null || this.text === undefined)) { _jq.text(this.text) }//if (this.text)</div><div class=\"ql-code-block\">            _jq.appendto = function (parent_jq) {</div><div class=\"ql-code-block\">                parent_jq.append(_jq)</div><div class=\"ql-code-block\">                return _jq</div><div class=\"ql-code-block\">            }</div><div class=\"ql-code-block\">            return _jq</div><div class=\"ql-code-block\">        } // this.make</div><div class=\"ql-code-block\">} // the word xml object (wxo)</div></div><p>t///</p>","children":[],"_substeps":{"idx":"MYb5c36cac-b864-490c-9570-b9e250fe7a4b","name":"substeps","custparents":[{"idx":"MYdaa60882-b8e8-4ea9-ab4d-7868a5cfb8cf"}],"children":[{"idx":"MY5133366c-d042-483d-889d-b0d2ffa8ad31","name":"define this.vars","custparents":[{"idx":"MYb5c36cac-b864-490c-9570-b9e250fe7a4b"}],"children":[{"idx":"MY45176fe6-ded5-48e3-b901-a26b234cf73d","name":"this.make()","custparents":[{"idx":"MY5133366c-d042-483d-889d-b0d2ffa8ad31"}],"children":[],"_substeps":{"idx":"MYe1c1fdc6-ff1a-44a8-b68a-197b54a3902e","name":"substeps","custparents":[{"idx":"MY45176fe6-ded5-48e3-b901-a26b234cf73d"}],"children":[{"idx":"MY4e7972c5-f217-49c3-b558-60912cf8aa4e","name":"make an empty jQuery obj with the tagname ","custparents":[{"idx":"MYe1c1fdc6-ff1a-44a8-b68a-197b54a3902e"}],"children":[{"idx":"MY1f0afae8-c07d-4ec8-920e-f83d22924e11","name":"add html","custparents":[{"idx":"MY4e7972c5-f217-49c3-b558-60912cf8aa4e"}]},{"idx":"MYae51ec8e-c4a9-4b99-ab9e-2409f6d83057","name":"add attributes","custparents":[{"idx":"MY4e7972c5-f217-49c3-b558-60912cf8aa4e"}]},{"idx":"MYacf05637-148d-4b75-a682-8d350c05a8d0","name":"add text contents","custparents":[{"idx":"MY4e7972c5-f217-49c3-b558-60912cf8aa4e"}]},{"idx":"MYb5cb8c61-724d-4980-b5c2-e544c33caeba","name":"this.appendto()","custparents":[{"idx":"MY4e7972c5-f217-49c3-b558-60912cf8aa4e"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">_jq.appendto = function (parent_jq) {</div><div class=\"ql-code-block\">                parent_jq.append(_jq)</div><div class=\"ql-code-block\">                return _jq</div><div class=\"ql-code-block\">            }</div></div><p>t///</p>"}]}]}}],"oldparentidx":"MYb5c36cac-b864-490c-9570-b9e250fe7a4b"}]}}],"collapsed":1},{"idx":"MYa40a6748-c20e-4347-b8b1-052fae0fd808","name":"for general purpose","custparents":[{"idx":"MY719ccc5e-0ccd-4bd8-bd3e-5d3d99da3de3"}],"children":[{"idx":"MYcc6bd1de-b24c-4aa0-b054-87f6c76d076c","name":"saveLocalTxtFile()","custparents":[{"idx":"MYa40a6748-c20e-4347-b8b1-052fae0fd808"},{"idx":"MY02d5db38-cdde-462c-b043-99b55286ba09"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// save to local file</div><div class=\"ql-code-block\">async function saveLocalTxtFile(thetxtstr, targettxtfile, encoding) {</div><div class=\"ql-code-block\">    encoding = encoding || 'utf-8' // by default using utf-8</div><div class=\"ql-code-block\">    let fs = require('fs');</div><div class=\"ql-code-block\">    // use writeFileSync instead of writeFile to avoid async problems</div><div class=\"ql-code-block\">    fs.writeFileSync(targettxtfile, thetxtstr, encoding, function (err) {</div><div class=\"ql-code-block\">        if (err) { console.log(err); }</div><div class=\"ql-code-block\">    });</div><div class=\"ql-code-block\">}; // saveLocalTxtFile</div></div><p>t///</p>"},{"idx":"MY45bd7959-c9ac-46e6-a78d-38da7fb0447e","name":"get_filename()","custparents":[{"idx":"MYa40a6748-c20e-4347-b8b1-052fae0fd808"},{"idx":"MYc94c2bbd-df58-41e6-ab82-75038ac3d6ab"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// get a dict of path, name, and extention name of a file</div><div class=\"ql-code-block\">// Note: the full path string of the file must be give as String.raw``</div><div class=\"ql-code-block\">// let filename_with_path = String.raw`data\\in\\prototype\\__xml/egpv7\\__egtask_example.xml`</div><div class=\"ql-code-block\">function get_filename(filename_with_path) {</div><div class=\"ql-code-block\">    // console.log(filename_with_path)</div><div class=\"ql-code-block\">    // convert backslash to slash</div><div class=\"ql-code-block\">    filename_with_path = filename_with_path.replace(/\\\\/g, '/')</div><div class=\"ql-code-block\">    // console.log(filename_with_path)</div><div class=\"ql-code-block\">    let startpos_slash = filename_with_path.lastIndexOf('/')</div><div class=\"ql-code-block\">    let filename_with_ext = filename_with_path.substr(startpos_slash + 1)</div><div class=\"ql-code-block\">    let startpos_dot = filename_with_ext.lastIndexOf('.')</div><div class=\"ql-code-block\">    let path = filename_with_path.substring(0, startpos_slash)</div><div class=\"ql-code-block\">    let name = filename_with_ext.substring(0, startpos_dot)</div><div class=\"ql-code-block\">    let ext = filename_with_ext.substr(startpos_dot + 1)</div><div class=\"ql-code-block\">    return { path: path, name: name, ext: ext }</div><div class=\"ql-code-block\">}; // function get_filename(filename_with_path)</div></div><p>t///</p>"}],"collapsed":1}],"collapsed":1}],"collapsed":1}