{"idx":"MY772a4d2d-295c-4662-8ec7-ef11d9cf2f24","name":"Research doc xml to research doc","treename":"tree_xlm_to_researchdoc","children":[{"idx":"MY98766ad9-adba-4027-92f9-789951ec9ec6","name":"main (101_make_rd_ docx_from_xml.js)","custparents":[{"idx":"MY772a4d2d-295c-4662-8ec7-ef11d9cf2f24"},{"idx":"MY560435da-209e-47fa-a46a-ed112b78bc7b"}],"children":[{"idx":"MY97b36e6e-7ae1-4637-9747-736988eb16fd","name":"substeps","custparents":[{"idx":"MY98766ad9-adba-4027-92f9-789951ec9ec6"}],"children":[{"idx":"MY7010225d-7982-48f2-9972-3a6915e67560","name":"settings","custparents":[{"idx":"MY97b36e6e-7ae1-4637-9747-736988eb16fd"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// jsdom and jquery must be used together</div><div class=\"ql-code-block\">const jsdom = require(\"jsdom\");</div><div class=\"ql-code-block\">const { window } = new jsdom.JSDOM(`...`);</div><div class=\"ql-code-block\">var $ = require(\"jquery\")(window);</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// https://www.npmjs.com/package/adm-zip</div><div class=\"ql-code-block\">const AdmZip = require('adm-zip');</div><div class=\"ql-code-block\">const { config, setgroups } = require('process');</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">const beautify = require('beautify');</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// src and target file settings:</div><div class=\"ql-code-block\">// src path and file file name:</div><div class=\"ql-code-block\">const srcPath = 'data/in/do_not_git/research_doc/';</div><div class=\"ql-code-block\">const srcFile = '__rd.docx';</div><div class=\"ql-code-block\">const srcfilepath = srcPath + srcFile;//\"data/in/sample_a_src.file\";</div><div class=\"ql-code-block\">// target path</div><div class=\"ql-code-block\">const targetFilePath = 'data/out/';</div><div class=\"ql-code-block\">// targetFile name will be automatically named (srcFileName + '_totarget.file')</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// const targetfile = \"data/in/do_not_git/src and target samples/sample3_src.file\";</div><div class=\"ql-code-block\">// make a zip instance of the thesrc src file file</div><div class=\"ql-code-block\">const srczip = new AdmZip(srcfilepath);</div><div class=\"ql-code-block\">const targetzip = new AdmZip();</div></div><p>t///</p>"},{"idx":"MY9eafc119-d442-45a7-99cf-0b17b89da980","name":"make_docx()","custparents":[{"idx":"MY97b36e6e-7ae1-4637-9747-736988eb16fd"}],"children":[{"idx":"MY179f894c-b74b-49a3-831c-4b70cbacb965","name":"substeps","custparents":[{"idx":"MY9eafc119-d442-45a7-99cf-0b17b89da980"}],"children":[{"idx":"MY27af7e5a-7c71-4c56-b8bd-62524ff72997","name":"get xml script from src file, read_xml_from_src()","custparents":[{"idx":"MY179f894c-b74b-49a3-831c-4b70cbacb965"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// get xml script from a src file</div><div class=\"ql-code-block\">async function read_xml_from_src(srczip) {</div><div class=\"ql-code-block\">    //*** read the src file data */</div><div class=\"ql-code-block\">    // 1. read the script of document.xml from srczip</div><div class=\"ql-code-block\">    let thesrcxmlfile_src = 'word/document.xml'</div><div class=\"ql-code-block\">    let encoding = \"utf-8\"; // the srcxml is directly from an file file, remmember to read in using \"utf16le\" encoding</div><div class=\"ql-code-block\">    let thesrcxmlstr_src = await srczip.readAsText(thesrcxmlfile_src, encoding); // 'utf-16' type is called 'utf16le'</div><div class=\"ql-code-block\">    // console.log('56:', thesrcxmlstr_src)</div><div class=\"ql-code-block\">    // 2. remove the head line '&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;', and clean the srcxml ()</div><div class=\"ql-code-block\">    let thebodyxmlstr_src = thesrcxmlstr_src.split('standalone=\"yes\"?&gt;')[1]</div><div class=\"ql-code-block\">    let thesrcxmlstr_src_cleaned = cleanxmlstr(thebodyxmlstr_src)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 3. make a jq for the cleaned src xml</div><div class=\"ql-code-block\">    let src_jq = $(thesrcxmlstr_src_cleaned)</div><div class=\"ql-code-block\">    // console.log('line47', src_jq)</div><div class=\"ql-code-block\">    return { 'jq_src': src_jq, 'theoriginsrcxmlstr_src': thesrcxmlstr_src }</div><div class=\"ql-code-block\">}; //async function read_xml_from_src</div></div><p>t///</p>","children":[{"idx":"MY87d6adf0-89be-44a6-bce5-df66bac5086d","name":"identify the body object (w:body) and empty its contents and descendants","custparents":[{"idx":"MY27af7e5a-7c71-4c56-b8bd-62524ff72997"}],"children":[{"idx":"MY42aa82b7-237d-48de-8f00-85476f19a840","name":"make rd components (title, credential table, notes, and research steps table)","custparents":[{"idx":"MY87d6adf0-89be-44a6-bce5-df66bac5086d"}],"children":[{"idx":"MY44204976-1f24-41b5-990b-180ab9a31263","name":"finalize target xml code text (clean up and recover original names)","custparents":[{"idx":"MY42aa82b7-237d-48de-8f00-85476f19a840"}],"children":[{"idx":"MYf00ae02e-9a74-43bc-aa17-f5ad703e7c02","name":"make the target zip obj","custparents":[{"idx":"MY44204976-1f24-41b5-990b-180ab9a31263"}],"children":[{"idx":"MYa6de7bfc-2b9f-4cc4-a2a5-37fecd2560d6","name":"save the targetzip to local as the target docx","custparents":[{"idx":"MYf00ae02e-9a74-43bc-aa17-f5ad703e7c02"}]}],"_substeps":{"idx":"MYde1c20f8-4233-46fa-b590-0277fb3634fa","name":"substeps","custparents":[{"idx":"MYf00ae02e-9a74-43bc-aa17-f5ad703e7c02"}],"children":[{"idx":"MY4d8c68be-73e2-4ce7-9639-7c8a9123606a","name":"delete document.xml in the srczip and make a new one with the target xml code","custparents":[{"idx":"MYde1c20f8-4233-46fa-b590-0277fb3634fa"}],"children":[{"idx":"MY646b0331-8bbc-460c-b027-4d135d98654c","name":"make the target zip obj by copying all files from the srczip obj","custparents":[{"idx":"MY4d8c68be-73e2-4ce7-9639-7c8a9123606a"}],"collapsed":0}],"collapsed":0}]},"collapsed":1}],"_substeps":{"idx":"MY888e3874-3f40-4e23-8deb-7f46cf619a34","name":"substeps","custparents":[{"idx":"MY44204976-1f24-41b5-990b-180ab9a31263"}],"children":[{"idx":"MY8b0b1b76-6d2c-4513-8ff0-4f1965411e2d","name":"clean the src xml text (so as to get tag names and attribute names in original case form): cleanxmlstr()","custparents":[{"idx":"MY888e3874-3f40-4e23-8deb-7f46cf619a34"}],"collapsed":0,"children":[{"idx":"MY621c0960-b2b7-449e-b31f-128d04969e7f","name":"clean up the target xml cleanup_targetxml()","custparents":[{"idx":"MY8b0b1b76-6d2c-4513-8ff0-4f1965411e2d"},{"idx":"MY8b0b1b76-6d2c-4513-8ff0-4f1965411e2d"}],"collapsed":0,"children":[{"idx":"MYaf405818-92ab-4fbb-8aba-5816203d597d","name":"save beautified target xml as a file saveLocalTxtFile()","custparents":[{"idx":"MY621c0960-b2b7-449e-b31f-128d04969e7f"},{"idx":"MY621c0960-b2b7-449e-b31f-128d04969e7f"}]}]}]}]},"collapsed":1}],"collapsed":1,"_substeps":{"idx":"MYd88c098b-904f-43ba-8821-ed254ecfeac7","name":"substeps","custparents":[{"idx":"MY42aa82b7-237d-48de-8f00-85476f19a840"}],"children":[{"idx":"MY32250f73-eeab-4d4f-9445-1ada18cd56ad","name":"define title","custparents":[{"idx":"MYd88c098b-904f-43ba-8821-ed254ecfeac7"}],"children":[{"idx":"MY5248cabd-29ba-4a64-9f0a-c7bc3cdb1028","name":"substeps","custparents":[{"idx":"MY32250f73-eeab-4d4f-9445-1ada18cd56ad"}],"children":[{"idx":"MY15cbb28b-b0cb-42e9-a24a-3266286291c7","name":"append a paragraph for Research Project Title wxp()","custparents":[{"idx":"MY5248cabd-29ba-4a64-9f0a-c7bc3cdb1028"}],"NodeDescription":"<p>///t</p><p><br></p><p>t///</p>","collapsed":0}]}]},{"idx":"MY375ef431-0901-47af-9793-beaf09f54c8e","name":"define the credential table","custparents":[{"idx":"MYd88c098b-904f-43ba-8821-ed254ecfeac7"}],"_substeps":{"idx":"MYb95e6444-fda2-48d5-a18c-82d8f6a0b4da","name":"substeps","custparents":[{"idx":"MY375ef431-0901-47af-9793-beaf09f54c8e"}],"children":[{"idx":"MY5bf2e60c-1993-425e-a2e7-f6610c5ca664","name":"append a table for credential wxtbl()","custparents":[{"idx":"MYb95e6444-fda2-48d5-a18c-82d8f6a0b4da"}],"children":[{"idx":"MY3ee9682b-8f98-4483-b5c9-cce3814af4bf","name":"add a new row: wxtr()","custparents":[{"idx":"MY5bf2e60c-1993-425e-a2e7-f6610c5ca664"}],"children":[{"idx":"MYbfdc9456-d20e-46ce-9bb0-a761a21efe4e","name":"append row head contents to the credential table wxtr() change_cell_contents()","custparents":[{"idx":"MY3ee9682b-8f98-4483-b5c9-cce3814af4bf"}],"children":[{"idx":"MYf763adbd-37cb-419f-9af5-6c2aa0e869ee","name":"append contents to the credential table (optional) wxtr() change_cell_contents()","custparents":[{"idx":"MYbfdc9456-d20e-46ce-9bb0-a761a21efe4e"}]}]}]}],"NodeDescription":"<p>///t</p><p><br></p><p>t///</p>","collapsed":0}]}},{"idx":"MY817a9506-8496-445a-92c4-fd0227963714","name":"define notes","custparents":[{"idx":"MYd88c098b-904f-43ba-8821-ed254ecfeac7"}],"NodeDescription":"<p>///t</p><p><br></p><p>t///</p>","_substeps":{"idx":"MYe1fbe82f-0213-448e-a32a-d1593ae2f550","name":"substeps","custparents":[{"idx":"MY817a9506-8496-445a-92c4-fd0227963714"}],"children":[{"idx":"MYa74464a4-984b-4d83-99c9-dffe4e98e112","name":"append a paragraph for Notes wxp()","custparents":[{"idx":"MYe1fbe82f-0213-448e-a32a-d1593ae2f550"}],"NodeDescription":"<p>///t</p><p><br></p><p>t///</p>","collapsed":0}]}},{"idx":"MYc4ba34fb-77e2-45fe-949c-00f75925cfbc","name":"define the research steps table","custparents":[{"idx":"MYd88c098b-904f-43ba-8821-ed254ecfeac7"}],"NodeDescription":"<p>///t</p><p><br></p><p>t///</p>","_substeps":{"idx":"MY70386d42-cf86-43ab-adb8-6e2c2df25bd7","name":"substeps","custparents":[{"idx":"MYc4ba34fb-77e2-45fe-949c-00f75925cfbc"}],"children":[{"idx":"MYcb5ba2f5-e749-47b7-af49-fffa7593475e","name":"append a table for research steps: wxtbl()","custparents":[{"idx":"MY70386d42-cf86-43ab-adb8-6e2c2df25bd7"}],"NodeDescription":"<p>///t</p><p><br></p><p>t///</p>","children":[{"idx":"MYd7c755e1-032e-4d88-b760-752c3e08f074","name":"add rows and contents to the table for Steps (optional): wxtr() change_cell_contents()","custparents":[{"idx":"MYcb5ba2f5-e749-47b7-af49-fffa7593475e"}],"NodeDescription":"<p>///t</p><p><br></p><p>t///</p>","collapsed":0}],"collapsed":0}]}},{"idx":"MYbcc530e8-f9fa-444c-ba64-0783ea83a009","name":"set sector properties","custparents":[{"idx":"MYd88c098b-904f-43ba-8821-ed254ecfeac7"}]}],"collapsed":1}}],"collapsed":1}],"collapsed":1,"_substeps":{"idx":"MYd03498b8-d3f2-4886-84cf-cc31e1d57bfa","name":"substeps","custparents":[{"idx":"MY27af7e5a-7c71-4c56-b8bd-62524ff72997"}],"children":[{"idx":"MYb70988ad-d78a-4fdc-bd3e-810fdfff7a77","name":"1. read xml from src zip","custparents":[{"idx":"MYd03498b8-d3f2-4886-84cf-cc31e1d57bfa"}],"children":[{"idx":"MYe8052f88-f15f-43cc-9d16-78a8f2a66622","name":"2. remove the headline of xml version and clean xml: cleanxmlstr()","custparents":[{"idx":"MYb70988ad-d78a-4fdc-bd3e-810fdfff7a77"}],"children":[{"idx":"MY27297d9c-0a0b-45e7-9cff-bdfb7e858faf","name":"3. make a jQuery object of the cleaned srcxml","custparents":[{"idx":"MYe8052f88-f15f-43cc-9d16-78a8f2a66622"}],"children":[{"idx":"MY02d5db38-cdde-462c-b043-99b55286ba09","name":"save the original src xml as a file saveLocalTxtFile()","custparents":[{"idx":"MY27297d9c-0a0b-45e7-9cff-bdfb7e858faf"}],"NodeDescription":"<p>///t</p><p>t///</p>"}]}]}]}]}}]}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// convert a update a docx file</div><div class=\"ql-code-block\">async function make_docx() {</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 1. get xml script and src_jq from a src file</div><div class=\"ql-code-block\">    let { jq_src, theoriginsrcxmlstr_src } = await read_xml_from_src(srczip)</div><div class=\"ql-code-block\">    // console.log('45:',  jq_src.prop('outerHTML').substr(0,500))</div><div class=\"ql-code-block\">    // 1a. save the theoriginsrcxmlstr_src as a local file (for viewing the contents during coding)</div><div class=\"ql-code-block\">    let xmlfile_src = targetFilePath + '__src_document.xml'</div><div class=\"ql-code-block\">    let beautfied_theoriginsrcxmlstr_src = beautify(theoriginsrcxmlstr_src, { format: 'xml' })</div><div class=\"ql-code-block\">    // await mymodules.saveLocalTxtFile(theoriginsrcxmlstr_v8, thetargetv8xmlfile, 'utf16le');</div><div class=\"ql-code-block\">    await saveLocalTxtFile(beautfied_theoriginsrcxmlstr_src, xmlfile_src, 'utf-8');</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 2 identify the body jq and empty its contents and descendants</div><div class=\"ql-code-block\">    // 2a identify the body jq_src, for tagnames with ':', need to add escape symbol (\\\\, must be \\\\, not \\) and make it as \\\\:</div><div class=\"ql-code-block\">    let body_jq_src = $(jq_src.find('w\\\\:body')[0])  </div><div class=\"ql-code-block\">    // 2b remove the exsiting contents within body xml</div><div class=\"ql-code-block\">    body_jq_src.empty()</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 3. make research doc components (title, credential, notes, steps, and sector settings)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 3a add a paragraph for title</div><div class=\"ql-code-block\">    let titlestr = 'The greatest research project ever in human history'</div><div class=\"ql-code-block\">    let title_p_jq = new wxp([titlestr], { 'w:val': \"Title\" }).make().appendto(body_jq_src)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 3b add a table for credential (created by, last modified on ...)</div><div class=\"ql-code-block\">    let credential_tbl_jq = new wxtbl('credential', '2093, 11083').make().appendto(body_jq_src)</div><div class=\"ql-code-block\">    // body_jq_src.append(credential_tbl_jq)</div><div class=\"ql-code-block\">    // add a new row to credential_tbl_jq </div><div class=\"ql-code-block\">    let credential_tr2_jq = new wxtr('2093, 11083').make().appendto(credential_tbl_jq)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    //3b1 add contents to cells 1,1 and 2,1 of the credential table</div><div class=\"ql-code-block\">    let p_jqs_arr = new wxp(['Created by']).make()</div><div class=\"ql-code-block\">    change_cell_contents(credential_tbl_jq, '1,1', p_jqs_arr)</div><div class=\"ql-code-block\">    p_jqs_arr = new wxp(['Last modified on']).make()</div><div class=\"ql-code-block\">    change_cell_contents(credential_tbl_jq, '2,1', p_jqs_arr)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    //3b2 optional: input values for the credential table (created by, modified on)</div><div class=\"ql-code-block\">    p_jqs_arr = new wxp(['Shenzhen Yao']).make()</div><div class=\"ql-code-block\">    change_cell_contents(credential_tbl_jq, '1,2', p_jqs_arr)</div><div class=\"ql-code-block\">    p_jqs_arr = new wxp(['2021-09-10']).make()</div><div class=\"ql-code-block\">    change_cell_contents(credential_tbl_jq, '2,2', p_jqs_arr)</div><div class=\"ql-code-block\"> </div><div class=\"ql-code-block\">    // 3c add a paragraph for notes</div><div class=\"ql-code-block\">    let notestext = 'Notes:'</div><div class=\"ql-code-block\">    let notes_p_jq = new wxp([notestext], { 'w:val': \"Normal\" }).make().appendto(body_jq_src)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    //3d add a table for research steps</div><div class=\"ql-code-block\">    let steps_tbl_jq = new wxtbl('steps', '3294, 5461, 3119, 1302', 'Steps, Criteria, Rationale, Modified on', { \"w:fill\": \"D9D9D9\" }).make().appendto(body_jq_src)</div><div class=\"ql-code-block\">    // body_jq_src.append(steps_tbl_jq)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    //3d1 optional: add a row to steps table for the text Objective 1 ({\"w:val\":\"4\"} to merge 4 colums)</div><div class=\"ql-code-block\">    new wxtr('11874', null, { \"w:val\": \"4\" }).make().appendto(steps_tbl_jq)</div><div class=\"ql-code-block\">    p_jqs_arr = [</div><div class=\"ql-code-block\">        new wxp(['Objective 1:']).make()</div><div class=\"ql-code-block\">    ]</div><div class=\"ql-code-block\">    change_cell_contents(steps_tbl_jq, '2,1', p_jqs_arr)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    new wxtr('3294, 5461, 3119, 1302').make().appendto(steps_tbl_jq)</div><div class=\"ql-code-block\">    p_jqs_arr = [</div><div class=\"ql-code-block\">        new wxp(['Create the cohort of new statin users']).make()</div><div class=\"ql-code-block\">    ]</div><div class=\"ql-code-block\">    change_cell_contents(steps_tbl_jq, '3,1', p_jqs_arr)</div><div class=\"ql-code-block\">    let pPrhtml = `&lt;w:pStyle w:val=\"ListParagraph\" /&gt;</div><div class=\"ql-code-block\">    &lt;w:numPr&gt;</div><div class=\"ql-code-block\">        &lt;w:ilvl w:val=\"0\" /&gt;</div><div class=\"ql-code-block\">        &lt;w:numId w:val=\"1\" /&gt;&lt;/w:numPr&gt;`</div><div class=\"ql-code-block\">    p_jqs_arr = [</div><div class=\"ql-code-block\">        new wxp(['index date (date of first statin dispensation) between Jan 1, 2010 and Dec 31, 2017;'], null, pPrhtml).make(),</div><div class=\"ql-code-block\">        new wxp(['continously covered in PHRS within 5 years prior to the index date through 1 year after the index date;'], null, pPrhtml).make(),</div><div class=\"ql-code-block\">        new wxp(['age on index date &gt; = 18.'], null, pPrhtml).make()</div><div class=\"ql-code-block\">    ]</div><div class=\"ql-code-block\">    change_cell_contents(steps_tbl_jq, '3,2', p_jqs_arr)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 3e set sector properties</div><div class=\"ql-code-block\">    body_jq_src.append(`&lt;w:sectPr w:rsidR=\"00206C6A\" w:rsidSect=\"005E006C\"&gt;</div><div class=\"ql-code-block\">    &lt;w:pgSz w:w=\"15840\" w:h=\"12240\" w:orient=\"landscape\" /&gt;</div><div class=\"ql-code-block\">    &lt;w:pgMar w:top=\"1800\" w:right=\"1440\" w:bottom=\"1800\" w:left=\"1440\" w:header=\"708\"</div><div class=\"ql-code-block\">    w:footer=\"708\" w:gutter=\"0\" /&gt;</div><div class=\"ql-code-block\">    &lt;w:cols w:space=\"708\" /&gt;</div><div class=\"ql-code-block\">    &lt;w:docGrid w:linePitch=\"360\" /&gt;&lt;/w:sectPr&gt;`)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 4 finalize the xml code text (clean up the target xml code)</div><div class=\"ql-code-block\">    //4a the src xml need to be cleaned as well before making the original tagname dict in cleanup_targetxml</div><div class=\"ql-code-block\">    let thesrcxmlstr_cleaned2 = theoriginsrcxmlstr_src.split('?&gt;')[1]</div><div class=\"ql-code-block\">    thesrcxmlstr_cleaned2 = thesrcxmlstr_cleaned2.replace(/\\&gt;/g, '&gt;\\n')</div><div class=\"ql-code-block\">    thesrcxmlstr_cleaned2 = cleanxmlstr(thesrcxmlstr_cleaned2)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 4b clean up the target xml (recover the orignal tagname and attr name, etc)</div><div class=\"ql-code-block\">    let xmlstr_target_cleaned = await cleanup_targetxml(jq_src, thesrcxmlstr_cleaned2)</div><div class=\"ql-code-block\">    // console.log('86', xmlstr_target_cleaned)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 4c. save beatufied target xml</div><div class=\"ql-code-block\">    xmlstr_target = '&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?&gt;\\n' + xmlstr_target_cleaned</div><div class=\"ql-code-block\">    xmlstr_target_beautified = beautify(xmlstr_target, { format: 'xml' })</div><div class=\"ql-code-block\">    let xmlfile_target = targetFilePath + '__target_document.xml'</div><div class=\"ql-code-block\">    await saveLocalTxtFile(xmlstr_target_beautified, xmlfile_target, 'utf-8');</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 5 make the targetzip obj</div><div class=\"ql-code-block\">    // do not beautify the target xml file as it'll add line breakers to the textcontent!</div><div class=\"ql-code-block\">    // 5a .add  document.xml to target target file.  using Buffer to import the xml with utf16 encoding</div><div class=\"ql-code-block\">    srczip.deleteFile('word/document.xml')</div><div class=\"ql-code-block\">    srczip.addFile('word/document.xml', Buffer.from(xmlstr_target, \"utf-8\"))</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 5b the amd-zip has a bug that theZip object (created from a zip) has error local header when using .toBuffer()</div><div class=\"ql-code-block\">    // when saving theZip to a local file (e.g., theZip.writeZip(), the files within the written zip can be corrupted)</div><div class=\"ql-code-block\">    // the work around is to migrate the files into a new zip! </div><div class=\"ql-code-block\">    let zipEntries = await srczip.getEntries()</div><div class=\"ql-code-block\">    for (let i = 0; i &lt; zipEntries.length; i++) {</div><div class=\"ql-code-block\">        let d = zipEntries[i]</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // read each file into a str</div><div class=\"ql-code-block\">        let thefilestr = await srczip.readAsText(d.entryName, 'utf-8')</div><div class=\"ql-code-block\">        // console.log(thefilestr.substring(0,10))</div><div class=\"ql-code-block\">        await targetzip.addFile(d.entryName, Buffer.from(thefilestr, \"utf-8\"))</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 6 save the targetzip obj as the target docx</div><div class=\"ql-code-block\">    //determine the name of the target file.</div><div class=\"ql-code-block\">    let target_filename = get_filename(srcFile).name</div><div class=\"ql-code-block\">    // console.log ('99', target_filename)</div><div class=\"ql-code-block\">    // save the target file. await targetzip.writeZip(\"data/out/\" + config_project.Element.Label + \"_totarget.file\")</div><div class=\"ql-code-block\">    await targetzip.writeZip(targetFilePath + target_filename + \"_target.docx\")</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">}; //async function make_docx()</div><div class=\"ql-code-block\"><br></div></div><p>t///</p>","collapsed":0}]}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">/* To update a word docx file according to the template */</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// jsdom and jquery must be used together</div><div class=\"ql-code-block\">const jsdom = require(\"jsdom\");</div><div class=\"ql-code-block\">const { window } = new jsdom.JSDOM(`...`);</div><div class=\"ql-code-block\">var $ = require(\"jquery\")(window);</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// https://www.npmjs.com/package/adm-zip</div><div class=\"ql-code-block\">const AdmZip = require('adm-zip');</div><div class=\"ql-code-block\">const { config, setgroups } = require('process');</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">const beautify = require('beautify');</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// src and target file settings:</div><div class=\"ql-code-block\">// src path and file file name:</div><div class=\"ql-code-block\">const srcPath = 'data/in/do_not_git/research_doc/';</div><div class=\"ql-code-block\">const srcFile = '__rd.docx';</div><div class=\"ql-code-block\">const srcfilepath = srcPath + srcFile;//\"data/in/sample_a_src.file\";</div><div class=\"ql-code-block\">// target path</div><div class=\"ql-code-block\">const targetFilePath = 'data/out/';</div><div class=\"ql-code-block\">// targetFile name will be automatically named (srcFileName + '_totarget.file')</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">// const targetfile = \"data/in/do_not_git/src and target samples/sample3_src.file\";</div><div class=\"ql-code-block\">// make a zip instance of the thesrc src file file</div><div class=\"ql-code-block\">const srczip = new AdmZip(srcfilepath);</div><div class=\"ql-code-block\">const targetzip = new AdmZip();</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">(async () =&gt; {</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // make a docx</div><div class=\"ql-code-block\">    await make_docx();</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">})()</div></div><p>t///</p>","collapsed":1},{"idx":"MY719ccc5e-0ccd-4bd8-bd3e-5d3d99da3de3","name":"repeatedly used modules","custparents":[{"idx":"MY772a4d2d-295c-4662-8ec7-ef11d9cf2f24"},{"idx":"MY560435da-209e-47fa-a46a-ed112b78bc7b"}],"children":[{"idx":"MY6b6a1283-871a-407a-87ed-4c5572f454cb","name":"for editing xml","custparents":[{"idx":"MY719ccc5e-0ccd-4bd8-bd3e-5d3d99da3de3"}],"children":[{"idx":"MYc4bb9b82-1f2c-463f-b718-dfdc9fe79931","name":"cleanxmlstr()","custparents":[{"idx":"MY6b6a1283-871a-407a-87ed-4c5572f454cb"},{"idx":"MYe8052f88-f15f-43cc-9d16-78a8f2a66622"},{"idx":"MY8b0b1b76-6d2c-4513-8ff0-4f1965411e2d"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// clean up the xmlstr</div><div class=\"ql-code-block\">function cleanxmlstr(thexmlstr) {</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // to cleanup the nonprintable chars</div><div class=\"ql-code-block\">    // let thexmlstr_remove_nonprintable = thexmlstr.replace(/[^\\x20-\\x7E\\s\\S]+/g, \"\")</div><div class=\"ql-code-block\">    let thexmlstr_remove_nonprintable = thexmlstr</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // the xmlstr is messed up with strange chars like &amp;amp;lt; &amp;lt;, etc</div><div class=\"ql-code-block\">    // The following is to change &amp;amp;lt to &lt;, &amp;gt to &gt; ...</div><div class=\"ql-code-block\">    // let thesrcxmlstr_ampersand_code_normalized = normalize_ampersand_code(thexmlstr_remove_nonprintable)</div><div class=\"ql-code-block\">    // Note: second thought! do not convert ampersand symbols. These ampersand symbols are necessary for SAS file to identify settings within an xml tag from xmltag</div><div class=\"ql-code-block\">    // for example within &lt;DNA&gt;  &lt;/DNA&gt;, the html '&amp;lt;DNA...&amp;gt;DNA' has special meanings for SAS EG to identify (in this case, to identify the setting for location of an external file)</div><div class=\"ql-code-block\">    // If the ampersand code '&amp;lt;' is converted, SAS EG will wrongly consider it as an xml tag, and ignore the settings.  </div><div class=\"ql-code-block\">    let thesrcxmlstr_ampersand_code_normalized = thexmlstr_remove_nonprintable</div><div class=\"ql-code-block\">    // console.log('79:', thesrcxmlstr_ampersand_code_normalized)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 1. jsdom does not handle the tag &lt;Table&gt;A&lt;/Table&gt; well</div><div class=\"ql-code-block\">    // In that case, it alters the html to '&lt;Table&gt;&lt;/Table&gt;A' !</div><div class=\"ql-code-block\">    // The following is to rename the tag &lt;Table&gt; to &lt;Table123&gt; to work around</div><div class=\"ql-code-block\">    let thesrcxmlstr_rename_table_table123 = rename_tag_named_table(thesrcxmlstr_ampersand_code_normalized)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // the xhtml self-colsing tags like &lt;Parameters /&gt; must be converted to &lt;Parameters&gt;&lt;/Parameters&gt;</div><div class=\"ql-code-block\">    // because the JSDOM does not read &lt;Parameters /&gt; well, it'll mess up the nested structure!</div><div class=\"ql-code-block\">    /**</div><div class=\"ql-code-block\">      e.g., the structure is like</div><div class=\"ql-code-block\">     &lt;Parameters /&gt;</div><div class=\"ql-code-block\">     &lt;ExecutionTimeSpan&gt;-P10675199DT2H48M5.4775808S&lt;/ExecutionTimeSpan&gt;</div><div class=\"ql-code-block\"> </div><div class=\"ql-code-block\">     JSDOM wrongly treat it as </div><div class=\"ql-code-block\">     &lt;Parameters&gt;</div><div class=\"ql-code-block\">        &lt;ExecutionTimeSpan&gt;-P10675199DT2H48M5.4775808S&lt;/ExecutionTimeSpan&gt;</div><div class=\"ql-code-block\">     &lt;/Parameters&gt;</div><div class=\"ql-code-block\">     2. the following is to convert  &lt;Parameters /&gt; to &lt;Parameters&gt;&lt;/Parameters&gt;</div><div class=\"ql-code-block\">     */</div><div class=\"ql-code-block\">    let thesrcxmlstr_selfclosing_converted = convertSelfClosingHTML_to_OldSchoolHTML(thesrcxmlstr_rename_table_table123)</div><div class=\"ql-code-block\">    // console.log('288', thesrcxmlstr_selfclosing_converted)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    //3. remove the comments (code within &lt;!--  and --&gt;)</div><div class=\"ql-code-block\">    let thesrcxmlstr_removecomments = removecomments(thesrcxmlstr_selfclosing_converted)</div><div class=\"ql-code-block\">    // console.log(thesrcxmlstr_removecomments)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    return thesrcxmlstr_removecomments</div><div class=\"ql-code-block\">}; //function cleanxmlstr(thexmlstr) </div></div><p>t///</p>","children":[],"_substeps":{"idx":"MY34f8ccc2-e42f-4cfb-bd3e-39b6a710ea31","name":"substeps","custparents":[{"idx":"MYc4bb9b82-1f2c-463f-b718-dfdc9fe79931"}],"children":[{"idx":"MY125e6b38-fcd2-48f4-8a37-63f849eeabac","name":"rename Table tags rename_tag_ named_table()","custparents":[{"idx":"MY34f8ccc2-e42f-4cfb-bd3e-39b6a710ea31"}],"NodeDescription":"<p>///t</p><p><br></p><p>t///</p>","children":[{"idx":"MY0572d293-c88a-46f8-b7fd-f82b6914c40e","name":"convert self closing tags convertSelfClosingHTML_ to_OldSchoolHTML()","custparents":[{"idx":"MY125e6b38-fcd2-48f4-8a37-63f849eeabac"}],"NodeDescription":"<p>///t</p><p><br></p><p>t///</p>","children":[{"idx":"MY56a89687-8900-4010-b3e5-8d0bb089509f","name":"remove comments removecommets()","custparents":[{"idx":"MY0572d293-c88a-46f8-b7fd-f82b6914c40e"}],"NodeDescription":"<p>///t</p><p>t///</p>"}],"collapsed":0}]}]}},{"idx":"MYf51fdafa-6270-4138-9b36-431de5b0fbf2","name":"cleanup_targetxml()","custparents":[{"idx":"MY6b6a1283-871a-407a-87ed-4c5572f454cb"},{"idx":"MY621c0960-b2b7-449e-b31f-128d04969e7f"}],"children":[],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// clean up the target xml (e.g., convert standardized tag names and attribute names to original case form, etc)</div><div class=\"ql-code-block\">async function cleanup_targetxml(doms_obj, thesrcxmlstr_cleaned) {</div><div class=\"ql-code-block\">    // 1. get the modified xmlstr</div><div class=\"ql-code-block\">    let modified_xmlstr = doms_obj.prop('outerHTML')</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 2. the program does not work well in identifying the tag names if there are two tags in a line</div><div class=\"ql-code-block\">    // the following is to force line breaking between two tags. </div><div class=\"ql-code-block\">    // the forced line breakers are with special marks ('___123456___')</div><div class=\"ql-code-block\">    // that way, after identifying the tag names, the target xml will be recovered to the original layout by removing these marked line breakers</div><div class=\"ql-code-block\">    modified_xmlstr = modified_xmlstr.replace(/\\&gt;/g, '&gt;\\n___123456___\\n')</div><div class=\"ql-code-block\">    // console.log('133', modified_xmlstr)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 3a. make a dictionary to map out the standardized and original tagnames</div><div class=\"ql-code-block\">    let originalTagnames_dict_crude = getOriginalTagNames_dict_crude(thesrcxmlstr_cleaned)</div><div class=\"ql-code-block\">    originalTagnames_dict_crude = { ...originalTagnames_dict_crude, ...{ 'W:TRPR': 'w:trPr' } }</div><div class=\"ql-code-block\">    // console.log('140', originalTagnames_dict_crude)</div><div class=\"ql-code-block\">    // 3b. make a dictionary to map out the standardized and original attribute names</div><div class=\"ql-code-block\">    let originalAttrNames_dict_crude = getOriginalAttrNames_dict_crude(thesrcxmlstr_cleaned)</div><div class=\"ql-code-block\">    // console.log('145', originalAttrNames_dict_crude)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 4a. replacce the standardized tagnames (all in uppercase) to original names</div><div class=\"ql-code-block\">    Object.keys(originalTagnames_dict_crude).forEach(d =&gt; {</div><div class=\"ql-code-block\">        let theoriginal = originalTagnames_dict_crude[d]</div><div class=\"ql-code-block\">        let regEx_normalized1 = new RegExp('\\&lt;' + d.toLowerCase() + '\\x20', 'g')</div><div class=\"ql-code-block\">        let regEx_normalized2 = new RegExp('\\&lt;' + d.toLowerCase() + '\\&gt;', 'g')</div><div class=\"ql-code-block\">        let regEx_normalized3 = new RegExp('\\&lt;\\/' + d.toLowerCase() + '&gt;', 'g')</div><div class=\"ql-code-block\">        modified_xmlstr = modified_xmlstr.replace(regEx_normalized1, '&lt;' + theoriginal + ' ')</div><div class=\"ql-code-block\">        modified_xmlstr = modified_xmlstr.replace(regEx_normalized2, '&lt;' + theoriginal + '&gt;')</div><div class=\"ql-code-block\">        modified_xmlstr = modified_xmlstr.replace(regEx_normalized3, '&lt;/' + theoriginal + '&gt;')</div><div class=\"ql-code-block\">    })</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 4b. replacce the standardized attribute names (all in lowercase) to original names</div><div class=\"ql-code-block\">    Object.keys(originalAttrNames_dict_crude).forEach(d =&gt; {</div><div class=\"ql-code-block\">        let theoriginal = originalAttrNames_dict_crude[d]</div><div class=\"ql-code-block\">        let regEx_normalized1 = new RegExp(d.toLowerCase() + '=', 'g')</div><div class=\"ql-code-block\">        modified_xmlstr = modified_xmlstr.replace(regEx_normalized1, theoriginal + '=')</div><div class=\"ql-code-block\">    })</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    // 5. remove the '\\n___123456___\\n'</div><div class=\"ql-code-block\">    modified_xmlstr = modified_xmlstr.replace(/\\n___123456___\\n/g, '')</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    return modified_xmlstr</div><div class=\"ql-code-block\">}; //async function cleanup_targetxml()</div></div><p>t///</p>","_substeps":{"idx":"MY5e280330-3e46-4a12-8984-279a9578b46e","name":"substeps","custparents":[{"idx":"MYf51fdafa-6270-4138-9b36-431de5b0fbf2"}],"children":[{"idx":"MY954671cd-6409-4598-a962-3aaca4902a77","name":"get the xml string from the input jQuery object (_jq)","custparents":[{"idx":"MY5e280330-3e46-4a12-8984-279a9578b46e"}],"children":[{"idx":"MYa3cb92f4-976d-4624-ac82-99732f3fe3fa","name":"force to change line after tag end (jQuery does not perform well if two tags are in the same line)","custparents":[{"idx":"MY954671cd-6409-4598-a962-3aaca4902a77"}],"children":[{"idx":"MY0f777c4f-7462-4872-b146-621e57ef7883","name":"dictionary of tagnames (normalized to original) getOriginalTagNames_ dict_crude()","custparents":[{"idx":"MYa3cb92f4-976d-4624-ac82-99732f3fe3fa"}],"children":[{"idx":"MYdbbdc475-9a80-456c-9368-7c2fa5c56abd","name":"add new tagnames into the dictionary of tagnames","custparents":[{"idx":"MY0f777c4f-7462-4872-b146-621e57ef7883"}],"children":[{"idx":"MY51ad67c5-c00a-4774-9c3d-d088ad3fe501","name":"in the xml from the jQuery obj (the modified target xml), replace normalized tag names with original case","custparents":[{"idx":"MYdbbdc475-9a80-456c-9368-7c2fa5c56abd"},{"idx":"MY6e30c418-df23-429b-a2ef-5f0b21200f1c"}],"children":[{"idx":"MY9d15a9cc-f23f-43e2-8334-12fd66f45b32","name":"in the xml from the jQuery obj (the modified target xml), replace normalized attribute names with original case","custparents":[{"idx":"MY51ad67c5-c00a-4774-9c3d-d088ad3fe501"}],"children":[{"idx":"MY52816036-a9df-4b44-80b8-7e818e8c08ae","name":"remove the link breakers for forcing to change line","custparents":[{"idx":"MY9d15a9cc-f23f-43e2-8334-12fd66f45b32"}]}]}]}]}]},{"idx":"MY6e30c418-df23-429b-a2ef-5f0b21200f1c","name":"dictionary of attribute (normalized to original) getOriginalAttrNames_ dict_crude()","custparents":[{"idx":"MYa3cb92f4-976d-4624-ac82-99732f3fe3fa"}]}]}]}]}},{"idx":"MYfc4fe24a-0bcc-4106-8a94-670a2d77555e","name":"getOriginalTagNames_ dict_crude()","custparents":[{"idx":"MY6b6a1283-871a-407a-87ed-4c5572f454cb"},{"idx":"MY0f777c4f-7462-4872-b146-621e57ef7883"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// get a list of tagnames in original case form</div><div class=\"ql-code-block\">// it is _crude as it contains tag like strings in submitted code (e.g., '&lt;note!&gt;' in submitted code '/*&lt;note!&gt; the dat set need to be sorted first!*/)</div><div class=\"ql-code-block\">function getOriginalTagNames_dict_crude(thexhmlstr) {</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    let orignalTagnames_dict = {}</div><div class=\"ql-code-block\">    // get strings between '&lt;/' and '&gt;', or between '&lt;' and '/&gt;'</div><div class=\"ql-code-block\">    // the matchAll returns all instances match a regexpress pattern, note: must use /g to indicate for repeating search</div><div class=\"ql-code-block\">    // the '...' in [... blabla] is to join the found instances into an array</div><div class=\"ql-code-block\">    // e.g., find all matched instances and join them into the array matched_arr1</div><div class=\"ql-code-block\">    let matched_arr1 = [...thexhmlstr.matchAll(/\\&lt;\\/(.*)\\&gt;/g)]</div><div class=\"ql-code-block\">    // console.log(\"line205\", matched_arr1[0])</div><div class=\"ql-code-block\">    let matched_arr2 = [...thexhmlstr.matchAll(/\\&lt;(.*) \\/\\&gt;/g)]</div><div class=\"ql-code-block\">    // console.log(\"matched_arr1\", matched_arr1.length)</div><div class=\"ql-code-block\">    // console.log(\"matched_arr2\", matched_arr2)</div><div class=\"ql-code-block\">    /** each element of the array is like the following, in which the second element is the text of the origianl tagname</div><div class=\"ql-code-block\">        ['&lt;Tag6 /&gt;','Tag6', ...]</div><div class=\"ql-code-block\">    */</div><div class=\"ql-code-block\">    // the following is to push such a second element into the final arr with distinct tagNames</div><div class=\"ql-code-block\">    matched_arr1.forEach(d =&gt; {</div><div class=\"ql-code-block\">        // console.log(d[1])</div><div class=\"ql-code-block\">        let theTag = d[1].split(' ')[0]</div><div class=\"ql-code-block\">        if (!Object.keys(orignalTagnames_dict).includes(theTag.toUpperCase())) {</div><div class=\"ql-code-block\">            orignalTagnames_dict[theTag.toUpperCase()] = theTag</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\">    })</div><div class=\"ql-code-block\">    matched_arr2.forEach(d =&gt; {</div><div class=\"ql-code-block\">        let theTag = d[1].split(' ')[0]</div><div class=\"ql-code-block\">        if (!Object.keys(orignalTagnames_dict).includes(theTag.toUpperCase())) {</div><div class=\"ql-code-block\">            orignalTagnames_dict[theTag.toUpperCase()] = theTag</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\">    })</div><div class=\"ql-code-block\">    return orignalTagnames_dict</div><div class=\"ql-code-block\">}; // function getOriginalTagNames(thexhmlstr)</div></div><p>t///</p>"},{"idx":"MY62d4c894-9064-46f3-9db8-dc6cd1e0e342","name":"getOriginalAttrNames_ dict_crude","custparents":[{"idx":"MY6b6a1283-871a-407a-87ed-4c5572f454cb"},{"idx":"MY6e30c418-df23-429b-a2ef-5f0b21200f1c"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// get a dict of attribute names in original case form like {\"egversion\":\"EGversion\"} (key is the normalized attribute name)</div><div class=\"ql-code-block\">// it is called _crude as it included strings in submitted code like \"a in the submitted code a=1;\"</div><div class=\"ql-code-block\">function getOriginalAttrNames_dict_crude(thexhmlstr) {</div><div class=\"ql-code-block\">    let orignalAttrnames_dict = {}</div><div class=\"ql-code-block\">    // get strings between ' ' and '='</div><div class=\"ql-code-block\">    // the matchAll returns all instances match a regexpress pattern, note: must use /g to indicate for repeating search</div><div class=\"ql-code-block\">    // the '...' in [... blabla] is to join the found instances into an array</div><div class=\"ql-code-block\">    // e.g., find all matched instances and join them into the array matched_arr1</div><div class=\"ql-code-block\">    // the regular express fails to identify strings betwen a white space and something</div><div class=\"ql-code-block\">    // for example: &lt;ProjectCollection EGVersion=\"8.1\" Type=\"...\"&gt;</div><div class=\"ql-code-block\">    // the expected matched strs are EGVersion=, and Type=</div><div class=\"ql-code-block\">    // however, the match returns ProjectCollection EGVersion=\"8.1\" Type= (two attributes are messed up in a single match result)</div><div class=\"ql-code-block\">    // let matched_arr1 = [...thexhmlstr.matchAll(/\\&lt;(.*)=/g)]</div><div class=\"ql-code-block\">    // To avoid it, thexhmlstr is splitted into segments by ' '</div><div class=\"ql-code-block\">    let thexhmlstr_segs = thexhmlstr.split(' ')</div><div class=\"ql-code-block\">    // that way, the EGVersion=\"8.1\" Type= are splitted into separate segments</div><div class=\"ql-code-block\">    // next, split each segment by = (if there is a = in the str) and select the first element of the split (e.g., for 'EGVersion=\"8.1\"', the first element of the split is 'EGVersion')</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    thexhmlstr_segs.forEach(d =&gt; {</div><div class=\"ql-code-block\">        if (d.includes('=')) {</div><div class=\"ql-code-block\">            let theAttrName = d.split('=')[0]</div><div class=\"ql-code-block\">            if (!Object.keys(orignalAttrnames_dict).includes(theAttrName.toLowerCase())) {</div><div class=\"ql-code-block\">                orignalAttrnames_dict[theAttrName.toLowerCase()] = theAttrName</div><div class=\"ql-code-block\">            }</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\">    }) // thexhmlstr_segs.forEach</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">    return orignalAttrnames_dict</div><div class=\"ql-code-block\">}; // function getOriginalTagNames(thexhmlstr)</div></div><p>t///</p>"},{"idx":"MY1a55ccf1-dd0d-4d3d-a947-7ae35f37c54a","name":"rename_tag_ named_table()","custparents":[{"idx":"MY6b6a1283-871a-407a-87ed-4c5572f454cb"},{"idx":"MY125e6b38-fcd2-48f4-8a37-63f849eeabac"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// jsdom does not handle the tag &lt;Table&gt;A&lt;/Table&gt; well</div><div class=\"ql-code-block\">// In that case, it alters the html to '&lt;Table&gt;&lt;/Table&gt;A' !</div><div class=\"ql-code-block\">// The following is to rename the tag &lt;Table&gt; to &lt;Table123&gt; to work around</div><div class=\"ql-code-block\">function rename_tag_named_table(thestr) {</div><div class=\"ql-code-block\">    thestr = thestr.replace(/\\&lt;Table\\&gt;/g, '&lt;Table123&gt;')</div><div class=\"ql-code-block\">    thestr = thestr.replace(/\\&lt;\\/Table\\&gt;/g, '&lt;/Table123&gt;')</div><div class=\"ql-code-block\">    return thestr</div><div class=\"ql-code-block\">}; // function rename_tag_named_table</div></div><p>t///</p>"},{"idx":"MY8df1ed23-0f6e-4c6a-a365-a060e86d0d68","name":"convertSelfClosingHTML_ to_OldSchoolHTML()","custparents":[{"idx":"MY6b6a1283-871a-407a-87ed-4c5572f454cb"},{"idx":"MY0572d293-c88a-46f8-b7fd-f82b6914c40e"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// convert &lt;Parameters /&gt; to &lt;Parameters&gt;&lt;/Parameters&gt;</div><div class=\"ql-code-block\">function convertSelfClosingHTML_to_OldSchoolHTML(str) {</div><div class=\"ql-code-block\">    let matched_arr = str.match(/\\&lt;(.*)\\/\\&gt;/)</div><div class=\"ql-code-block\">    // console.log('324', matched_arr.length)</div><div class=\"ql-code-block\">    if (matched_arr &amp;&amp; matched_arr.length &gt; 0) {</div><div class=\"ql-code-block\">        let seg1 = matched_arr[1].split('&lt;')</div><div class=\"ql-code-block\">        // sometimes the lastmatchedstr is like GitSourceControl GUID=\"x2K5fW8CFtZy3Ke7\"</div><div class=\"ql-code-block\">        // in that case, the part after the first whitespace (GUID=\"x2K5fW8CFtZy3Ke7\") should be excluded </div><div class=\"ql-code-block\">        let theLastMatchedStr = seg1[seg1.length - 1]</div><div class=\"ql-code-block\">        // console.log(theLastMatchedStr)</div><div class=\"ql-code-block\">        let theLastMatchedStr_tagName = theLastMatchedStr.split(' ')[0]</div><div class=\"ql-code-block\">        // console.log(theLastMatchedStr_tagName)</div><div class=\"ql-code-block\">        // replace &lt;Others /&gt; with &lt;Others&gt;&lt;/&lt;Others /&gt;</div><div class=\"ql-code-block\">        let xhtmlstr = \"&lt;\" + theLastMatchedStr + \"/&gt;\"</div><div class=\"ql-code-block\">        let htmlstr = \"&lt;\" + theLastMatchedStr + \"&gt;\" + \"&lt;/\" + theLastMatchedStr_tagName + \"&gt;\"</div><div class=\"ql-code-block\">        str = str.replace(xhtmlstr, htmlstr)</div><div class=\"ql-code-block\">        let matched_arr2 = str.match(/\\&lt;(.*)\\/\\&gt;/)</div><div class=\"ql-code-block\">        if (matched_arr2 &amp;&amp; matched_arr2.length &gt; 0) {</div><div class=\"ql-code-block\">            str = convertSelfClosingHTML_to_OldSchoolHTML(str)</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">    return str</div><div class=\"ql-code-block\">}; // function convertSelfClosingHTML_to_OldSchoolHTML(str...</div></div><p>t///</p>"},{"idx":"MY88718a9b-1b2c-47fd-aa2b-7841c3d39cb0","name":"removecomments()","custparents":[{"idx":"MY6b6a1283-871a-407a-87ed-4c5572f454cb"},{"idx":"MY56a89687-8900-4010-b3e5-8d0bb089509f"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// remmove comments</div><div class=\"ql-code-block\">function removecomments(thestr) {</div><div class=\"ql-code-block\">    let result = ''</div><div class=\"ql-code-block\">    // split str by '&lt;!--'</div><div class=\"ql-code-block\">    let segments = thestr.split('&lt;!--')</div><div class=\"ql-code-block\">    for (let i = 0; i &lt; segments.length; i++) {</div><div class=\"ql-code-block\">        if (segments[i].includes('--&gt;')) {</div><div class=\"ql-code-block\">            let theSeg = segments[i].split('--&gt;')[1]</div><div class=\"ql-code-block\">            result = result + theSeg</div><div class=\"ql-code-block\">        } else {</div><div class=\"ql-code-block\">            result = result + segments[i]</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\">    }</div><div class=\"ql-code-block\">    return result</div><div class=\"ql-code-block\">}; //function removecomments</div></div><p>t///</p>"},{"idx":"MYf1ed7573-c5f6-4f93-aa12-ce77c1a85d12","name":"wxp()","custparents":[{"idx":"MY6b6a1283-871a-407a-87ed-4c5572f454cb"},{"idx":"MY15cbb28b-b0cb-42e9-a24a-3266286291c7"},{"idx":"MY0c9846cb-a018-4533-9f77-8928558c2427"},{"idx":"MYa74464a4-984b-4d83-99c9-dffe4e98e112"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// make a word paragraph xml</div><div class=\"ql-code-block\">function wxp(text_arr, pStyleAttrs, pPrhtml, rPrhtml) {</div><div class=\"ql-code-block\">    this.pPrhtml</div><div class=\"ql-code-block\">    this.rPrhtml</div><div class=\"ql-code-block\">    this.text_arr = text_arr</div><div class=\"ql-code-block\">    this.pStyleAttrs = pStyleAttrs</div><div class=\"ql-code-block\">    this.make = function () {</div><div class=\"ql-code-block\">        let p_jq = new wxo('w:p').make()</div><div class=\"ql-code-block\">        // if pStyleAttrs is defined, add tags for pStyle settings</div><div class=\"ql-code-block\">        // add an empty w:pPr selector</div><div class=\"ql-code-block\">        let p_pPr_jq = new wxo('w:pPr', null, pPrhtml).make()</div><div class=\"ql-code-block\">        p_jq.append(p_pPr_jq)</div><div class=\"ql-code-block\">        if (this.pStyleAttrs) {</div><div class=\"ql-code-block\">            // append a pSytle selector in paragraph</div><div class=\"ql-code-block\">            let pStyle_jq = new wxo('w:pStyle', pStyleAttrs).make()</div><div class=\"ql-code-block\">            p_pPr_jq.append(pStyle_jq)</div><div class=\"ql-code-block\">        }//</div><div class=\"ql-code-block\">        // if runs and text within are defined, make w:r and  w:t according to their runs within the paragraph</div><div class=\"ql-code-block\">        if (text_arr) {</div><div class=\"ql-code-block\">            text_arr.forEach(text =&gt; {</div><div class=\"ql-code-block\">                // make a run</div><div class=\"ql-code-block\">                let r_jq = new wxo('w:r', null, rPrhtml).make()</div><div class=\"ql-code-block\">                // make a text</div><div class=\"ql-code-block\">                let t_jq = new wxo('w:t', null, null, text).make()</div><div class=\"ql-code-block\">                // console.log('30', t_jq.prop('outerHTML'))</div><div class=\"ql-code-block\">                r_jq.append(t_jq)</div><div class=\"ql-code-block\">                p_jq.append(r_jq)</div><div class=\"ql-code-block\">            }) // text_arr.forEach</div><div class=\"ql-code-block\">        } // if (text_arr)</div><div class=\"ql-code-block\">        p_jq.appendto = function (parent_jq) {</div><div class=\"ql-code-block\">            parent_jq.append(p_jq)</div><div class=\"ql-code-block\">            return p_jq</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\">        return p_jq</div><div class=\"ql-code-block\">    } //this.make = function</div><div class=\"ql-code-block\">} // function wxp ()</div></div><p>t///</p>","children":[],"_substeps":{"idx":"MYa2189ea7-5351-4d30-8aa4-f753523a08ae","name":"substeps","custparents":[{"idx":"MYf1ed7573-c5f6-4f93-aa12-ce77c1a85d12"}],"children":[{"idx":"MY2f41007a-34cd-42e0-8975-474dfb025197","name":"define this.vars","custparents":[{"idx":"MYa2189ea7-5351-4d30-8aa4-f753523a08ae"}],"children":[{"idx":"MY7f53e34f-8fea-49f4-819f-e58bab9af445","name":"this.make() function","custparents":[{"idx":"MY2f41007a-34cd-42e0-8975-474dfb025197"}],"children":[],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">this.make = function () {</div><div class=\"ql-code-block\">        let p_jq = new wxo('w:p').make()</div><div class=\"ql-code-block\">        // if pStyleAttrs is defined, add tags for pStyle settings</div><div class=\"ql-code-block\">        // add an empty w:pPr selector</div><div class=\"ql-code-block\">        let p_pPr_jq = new wxo('w:pPr', null, pPrhtml).make()</div><div class=\"ql-code-block\">        p_jq.append(p_pPr_jq)</div><div class=\"ql-code-block\">        if (this.pStyleAttrs) {</div><div class=\"ql-code-block\">            // append a pSytle selector in paragraph</div><div class=\"ql-code-block\">            let pStyle_jq = new wxo('w:pStyle', pStyleAttrs).make()</div><div class=\"ql-code-block\">            p_pPr_jq.append(pStyle_jq)</div><div class=\"ql-code-block\">        }//</div><div class=\"ql-code-block\">        // if runs and text within are defined, make w:r and  w:t according to their runs within the paragraph</div><div class=\"ql-code-block\">        if (text_arr) {</div><div class=\"ql-code-block\">            text_arr.forEach(text =&gt; {</div><div class=\"ql-code-block\">                // make a run</div><div class=\"ql-code-block\">                let r_jq = new wxo('w:r', null, rPrhtml).make()</div><div class=\"ql-code-block\">                // make a text</div><div class=\"ql-code-block\">                let t_jq = new wxo('w:t', null, null, text).make()</div><div class=\"ql-code-block\">                // console.log('30', t_jq.prop('outerHTML'))</div><div class=\"ql-code-block\">                r_jq.append(t_jq)</div><div class=\"ql-code-block\">                p_jq.append(r_jq)</div><div class=\"ql-code-block\">            }) // text_arr.forEach</div><div class=\"ql-code-block\">        } // if (text_arr)</div><div class=\"ql-code-block\">        p_jq.appendto = function (parent_jq) {</div><div class=\"ql-code-block\">            parent_jq.append(p_jq)</div><div class=\"ql-code-block\">            return p_jq</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\">        return p_jq</div><div class=\"ql-code-block\">    } //this.make = function</div></div><p>t///</p>","_substeps":{"idx":"MY39bd7505-2876-4355-8836-ccc069f904ed","name":"substeps","custparents":[{"idx":"MY7f53e34f-8fea-49f4-819f-e58bab9af445"}],"children":[{"idx":"MY2efdfc56-b3c0-4fcd-898e-69d2d38a6b00","name":"make an empty paragraph(w:p): wxo()","custparents":[{"idx":"MY39bd7505-2876-4355-8836-ccc069f904ed"}],"NodeDescription":"<p>///t</p><p><br></p><p>t///</p>","children":[{"idx":"MY9a82bed8-5a2e-4933-b603-77b6bcb69040","name":"append property tag (w:pPr) to the paragraph: wxo()","custparents":[{"idx":"MY2efdfc56-b3c0-4fcd-898e-69d2d38a6b00"}],"children":[{"idx":"MY320e8e54-532d-4c52-adba-9d4a7c84698d","name":"append pStyle (w:pStyle) to the property tag: wxo()","custparents":[{"idx":"MY9a82bed8-5a2e-4933-b603-77b6bcb69040"}],"children":[{"idx":"MY841c28df-4fc7-472e-bef0-1697ca893cf2","name":"add run (w:r) and text (w:t) tags: wxo()","custparents":[{"idx":"MY320e8e54-532d-4c52-adba-9d4a7c84698d"}],"children":[{"idx":"MYcf9d0895-7bcb-4104-b988-1cc50af54328","name":"this.appendto()","custparents":[{"idx":"MY841c28df-4fc7-472e-bef0-1697ca893cf2"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">p_jq.appendto = function (parent_jq) {</div><div class=\"ql-code-block\">            parent_jq.append(p_jq)</div><div class=\"ql-code-block\">            return p_jq</div><div class=\"ql-code-block\">        }</div></div><p>t///</p>"}]}]}]}]}]}}]}]}},{"idx":"MYdaa60882-b8e8-4ea9-ab4d-7868a5cfb8cf","name":"wxo()","custparents":[{"idx":"MY6b6a1283-871a-407a-87ed-4c5572f454cb"},{"idx":"MY2efdfc56-b3c0-4fcd-898e-69d2d38a6b00"},{"idx":"MY9a82bed8-5a2e-4933-b603-77b6bcb69040"},{"idx":"MY320e8e54-532d-4c52-adba-9d4a7c84698d"},{"idx":"MY841c28df-4fc7-472e-bef0-1697ca893cf2"},{"idx":"MY8a3059fd-2ce8-4d33-833c-f1d17249139b"},{"idx":"MYdddbd702-8427-45ad-b631-f272e8a4dc67"},{"idx":"MY71793b7b-879d-43fa-96ea-8ae5c7b5ce98"},{"idx":"MY35cf9556-4b7a-4cc4-889d-88bb36e9c3d9"},{"idx":"MYe2069221-bc5a-4b6f-8a18-7a93e52d5b46"},{"idx":"7cd0b7a3-8514-4ee0-80cd-44ab5484ad89"},{"idx":"MY9f95bc78-c744-4f84-b7b0-cdad2503f7c6"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// make a word xml object (wxo)</div><div class=\"ql-code-block\">function wxo(tagname, attrs, html, text) {</div><div class=\"ql-code-block\">    this.tagname = tagname,</div><div class=\"ql-code-block\">        this.attrs = attrs,</div><div class=\"ql-code-block\">        this.html = html,</div><div class=\"ql-code-block\">        this.text = text,</div><div class=\"ql-code-block\">        this.make = function () {</div><div class=\"ql-code-block\">            let taghead = '&lt;' + this.tagname + '&gt;', tagend = '&lt;/' + this.tagname + '&gt;'</div><div class=\"ql-code-block\">            let theTag = taghead + tagend</div><div class=\"ql-code-block\">            let _jq = $(theTag)</div><div class=\"ql-code-block\">            if (this.html) { _jq.html(this.html) }</div><div class=\"ql-code-block\">            if (this.attrs) {</div><div class=\"ql-code-block\">                Object.keys(this.attrs).forEach(key =&gt; {</div><div class=\"ql-code-block\">                    _jq.attr(key, this.attrs[key])</div><div class=\"ql-code-block\">                })</div><div class=\"ql-code-block\">            } // if (this.attrs &amp;&amp; this.attrs.length &gt;0)</div><div class=\"ql-code-block\">            if (this.text) { _jq.text(this.text) }//if (this.text)</div><div class=\"ql-code-block\">            _jq.appendto = function (parent_jq) {</div><div class=\"ql-code-block\">                parent_jq.append(_jq)</div><div class=\"ql-code-block\">                return _jq</div><div class=\"ql-code-block\">            }</div><div class=\"ql-code-block\">            return _jq</div><div class=\"ql-code-block\">        } // this.make</div><div class=\"ql-code-block\">} // the word xml object (wxo)</div></div><p>t///</p>","children":[],"_substeps":{"idx":"MYb5c36cac-b864-490c-9570-b9e250fe7a4b","name":"substeps","custparents":[{"idx":"MYdaa60882-b8e8-4ea9-ab4d-7868a5cfb8cf"}],"children":[{"idx":"MY5133366c-d042-483d-889d-b0d2ffa8ad31","name":"define this.vars","custparents":[{"idx":"MYb5c36cac-b864-490c-9570-b9e250fe7a4b"}],"children":[{"idx":"MY45176fe6-ded5-48e3-b901-a26b234cf73d","name":"this.make()","custparents":[{"idx":"MY5133366c-d042-483d-889d-b0d2ffa8ad31"}],"children":[],"_substeps":{"idx":"MYe1c1fdc6-ff1a-44a8-b68a-197b54a3902e","name":"substeps","custparents":[{"idx":"MY45176fe6-ded5-48e3-b901-a26b234cf73d"}],"children":[{"idx":"MY4e7972c5-f217-49c3-b558-60912cf8aa4e","name":"make an empty jQuery obj with the tagname ","custparents":[{"idx":"MYe1c1fdc6-ff1a-44a8-b68a-197b54a3902e"}],"children":[{"idx":"MY1f0afae8-c07d-4ec8-920e-f83d22924e11","name":"add html","custparents":[{"idx":"MY4e7972c5-f217-49c3-b558-60912cf8aa4e"}]},{"idx":"MYae51ec8e-c4a9-4b99-ab9e-2409f6d83057","name":"add attributes","custparents":[{"idx":"MY4e7972c5-f217-49c3-b558-60912cf8aa4e"}]},{"idx":"MYacf05637-148d-4b75-a682-8d350c05a8d0","name":"add text contents","custparents":[{"idx":"MY4e7972c5-f217-49c3-b558-60912cf8aa4e"}]},{"idx":"MYb5cb8c61-724d-4980-b5c2-e544c33caeba","name":"this.appendto()","custparents":[{"idx":"MY4e7972c5-f217-49c3-b558-60912cf8aa4e"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">_jq.appendto = function (parent_jq) {</div><div class=\"ql-code-block\">                parent_jq.append(_jq)</div><div class=\"ql-code-block\">                return _jq</div><div class=\"ql-code-block\">            }</div></div><p>t///</p>"}]}]}}],"oldparentidx":"MYb5c36cac-b864-490c-9570-b9e250fe7a4b"}]}},{"idx":"MY108931ed-2c11-4b45-912d-e0735450e85e","name":"wxtbl()","custparents":[{"idx":"MY6b6a1283-871a-407a-87ed-4c5572f454cb"},{"idx":"MY5bf2e60c-1993-425e-a2e7-f6610c5ca664"},{"idx":"MYcb5ba2f5-e749-47b7-af49-fffa7593475e"}],"children":[],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// make a word tbl xml </div><div class=\"ql-code-block\">function wxtbl(tablename, width_cols_str, colheads_str, shdattrs_headrow, width_tbl, n_cols) {</div><div class=\"ql-code-block\">    if (!tablename) (tablename = '')</div><div class=\"ql-code-block\">    this.tablename = tablename</div><div class=\"ql-code-block\">    this.width_cols_str = width_cols_str</div><div class=\"ql-code-block\">    this.colheads_str = colheads_str</div><div class=\"ql-code-block\">    this.shdattrs_headrow = shdattrs_headrow</div><div class=\"ql-code-block\">    this.width_tbl = width_tbl</div><div class=\"ql-code-block\">    this.n_cols = n_cols</div><div class=\"ql-code-block\">    this.make = function () {</div><div class=\"ql-code-block\">        // set default table width, and make a column width string by evenly divide width of column</div><div class=\"ql-code-block\">        if (!this.width_tbl) { this.width_tbl = '8000' }</div><div class=\"ql-code-block\">        if (!this.n_cols) { this.n_cols = 1 }</div><div class=\"ql-code-block\">        if (this.width_tbl &amp;&amp; this.n_cols &amp;&amp; !this.width_cols_str) {</div><div class=\"ql-code-block\">            this.width_cols_str = ''</div><div class=\"ql-code-block\">            for (let i = 0; i &lt; this.n_cols; i++) {</div><div class=\"ql-code-block\">                this.width_cols_str = this.width_cols_str + ',' + Math.floor(parseInt(this.width_tbl) / this.n_cols).toString()</div><div class=\"ql-code-block\">            } // for(let i=0; i&lt;this.n_cols-1; i++)</div><div class=\"ql-code-block\">            // remove the heading ',' in the string</div><div class=\"ql-code-block\">            this.width_cols_str = this.width_cols_str.substr(1)</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // make an empty table, and within it, append property and style tags (w:tblPr and w:tblStyle)</div><div class=\"ql-code-block\">        let tbl_jq = new wxo('w:tbl', { \"tablename\": this.tablename }).make().append(</div><div class=\"ql-code-block\">            new wxo('w:tblPr').make().append(</div><div class=\"ql-code-block\">                new wxo('w:tblStyle', { 'w:val': 'TableGrid' }).make(),</div><div class=\"ql-code-block\">            ) // new wxo('w:tblPr').make().append</div><div class=\"ql-code-block\">        )// new wxo('w:tbl').make().append</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // define the cols</div><div class=\"ql-code-block\">        let cols_width_arr = this.width_cols_str.split(',').map(x =&gt; { return { width: x.trim() } })</div><div class=\"ql-code-block\">        </div><div class=\"ql-code-block\">        // define table column heads</div><div class=\"ql-code-block\">        let colheads_arr</div><div class=\"ql-code-block\">        // if colheads_str is null or undefined, use cols_width_arr to make an array of elements of ''</div><div class=\"ql-code-block\">        // that way, the table has at least one row with cells, and in each cell, there is a paragraph. </div><div class=\"ql-code-block\">        // a paragrah is mandated to have, otherwise WORD application reports error</div><div class=\"ql-code-block\">        if (!this.colheads_str) {</div><div class=\"ql-code-block\">            colheads_arr = this.width_cols_str.split(',').map(x =&gt; { return { colheadtext: '' } })</div><div class=\"ql-code-block\">        } else {</div><div class=\"ql-code-block\">            colheads_arr = this.colheads_str.split(',').map(x =&gt; { return { colheadtext: x.trim() } })</div><div class=\"ql-code-block\">        } //if (! this.colheads_str) </div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // make the head row</div><div class=\"ql-code-block\">        let headrow_jq = new wxo('w:tr').make().appendto(tbl_jq)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">        // loop for each col and set col</div><div class=\"ql-code-block\">        let col_index = 0</div><div class=\"ql-code-block\">        cols_width_arr.forEach(d =&gt; {</div><div class=\"ql-code-block\">            // make the cell of the row</div><div class=\"ql-code-block\">            let thecell_jq = new wxo('w:tc').make()</div><div class=\"ql-code-block\">            // add a selector for cell property</div><div class=\"ql-code-block\">            let thecell_pr_jq = new wxo('w:tcPr').make().appendto(thecell_jq)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">            // set width</div><div class=\"ql-code-block\">            thecell_pr_jq.append(new wxo('w:tcW', { 'w:w': d.width, 'w:type': 'dxa' }).make())</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">            // if fill is defined, set fill color</div><div class=\"ql-code-block\">            if (this.shdattrs_headrow) {</div><div class=\"ql-code-block\">                thecell_pr_jq.append(new wxo('w:shd', { ...this.shdattrs_headrow, ...{ 'w:type': 'dxa' } }).make())</div><div class=\"ql-code-block\">            } //if (this.shdattrs_headrow) {</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">            // if header is defined, add header text</div><div class=\"ql-code-block\">            if (colheads_arr) {</div><div class=\"ql-code-block\">                // get the colhead of the corresponding column</div><div class=\"ql-code-block\">                let colheadtext = colheads_arr[col_index].colheadtext</div><div class=\"ql-code-block\">                // make a paragraph for the colheadtext</div><div class=\"ql-code-block\">                // make the font in bold style</div><div class=\"ql-code-block\">                let rPrhtml = `&lt;w:rPr&gt;</div><div class=\"ql-code-block\">                &lt;w:b/&gt;</div><div class=\"ql-code-block\">                &lt;w:sz w:val=\"24\" /&gt;</div><div class=\"ql-code-block\">                &lt;w:szCs w:val=\"24\" /&gt;&lt;/w:rPr&gt;`</div><div class=\"ql-code-block\">                let p_jq = new wxp([colheadtext], null, null, rPrhtml ).make().appendto(thecell_jq)</div><div class=\"ql-code-block\">            } // if (this.colheads_arr)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">            // append the cell to the row</div><div class=\"ql-code-block\">            headrow_jq.append(thecell_jq)</div><div class=\"ql-code-block\">            col_index++</div><div class=\"ql-code-block\">        }) // cols_width_arr.forEach</div><div class=\"ql-code-block\">        </div><div class=\"ql-code-block\">        // update address of cells (like address = '1,1' for r1c1) </div><div class=\"ql-code-block\">        update_cell_address_tbl(tbl_jq)</div><div class=\"ql-code-block\">        // set the function appendto</div><div class=\"ql-code-block\">        tbl_jq.appendto = function (parent_jq) {</div><div class=\"ql-code-block\">            parent_jq.append(tbl_jq)</div><div class=\"ql-code-block\">            return tbl_jq</div><div class=\"ql-code-block\">        }</div><div class=\"ql-code-block\">        return tbl_jq</div><div class=\"ql-code-block\">    } // this.make = function</div><div class=\"ql-code-block\">} // function wxtbl()</div></div><p>t///</p>","_substeps":{"idx":"MY71b867e0-a95e-4245-9daf-4bc35f6a04ac","name":"substeps","custparents":[{"idx":"MY108931ed-2c11-4b45-912d-e0735450e85e"}],"children":[{"idx":"e2034e30-6606-4ddd-9489-0cdb987980b0","name":"define this.vars","custparents":[{"idx":"MY71b867e0-a95e-4245-9daf-4bc35f6a04ac"}],"children":[{"idx":"9256d0cf-7409-4f04-a587-c19b2cc8a366","name":"this.make()","custparents":[{"idx":"e2034e30-6606-4ddd-9489-0cdb987980b0"}],"children":[],"_substeps":{"idx":"MYe1c1fdc6-ff1a-44a8-b68a-197b54a3902e","name":"substeps","custparents":[{"idx":"MY45176fe6-ded5-48e3-b901-a26b234cf73d"}],"children":[{"idx":"MYd2681de8-b315-4b7e-ba96-5005adbf4827","name":"set default table width, and make a column width string by evenly divide width of column","custparents":[{"idx":"MYe1c1fdc6-ff1a-44a8-b68a-197b54a3902e"}],"children":[{"idx":"MY8a3059fd-2ce8-4d33-833c-f1d17249139b","name":"make an empty table, and within it, append property and style tags : wxo()","custparents":[{"idx":"MYd2681de8-b315-4b7e-ba96-5005adbf4827"}],"children":[{"idx":"MYa68df504-0875-49d4-8076-a960a11a2a14","name":"Define an array of column width values (cols_width_arr)","custparents":[{"idx":"MY8a3059fd-2ce8-4d33-833c-f1d17249139b"}],"children":[{"idx":"MY789e03a4-b571-4d02-b10b-2438aab2d714","name":"Make an array of column head text values (colhead_arr)","custparents":[{"idx":"MYa68df504-0875-49d4-8076-a960a11a2a14"}],"children":[{"idx":"MYdddbd702-8427-45ad-b631-f272e8a4dc67","name":"make the head row and append to the table: wxo()","custparents":[{"idx":"MY789e03a4-b571-4d02-b10b-2438aab2d714"}],"children":[{"idx":"MY2a39637a-6f59-4882-93d5-b2b0a54277e8","name":"loop for each column and append cells","custparents":[{"idx":"MYdddbd702-8427-45ad-b631-f272e8a4dc67"}],"children":[{"idx":"MYd480b691-d3c5-4d06-863e-30a380324b95","name":"update_cell_ address_tbl()","custparents":[{"idx":"MY2a39637a-6f59-4882-93d5-b2b0a54277e8"}],"children":[{"idx":"MYc557ed87-8ceb-4625-acee-5466f7bd7378","name":"tbl_jq.appendto()","custparents":[{"idx":"MYd480b691-d3c5-4d06-863e-30a380324b95"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// set the function appendto</div><div class=\"ql-code-block\">        tbl_jq.appendto = function (parent_jq) {</div><div class=\"ql-code-block\">            parent_jq.append(tbl_jq)</div><div class=\"ql-code-block\">            return tbl_jq</div><div class=\"ql-code-block\">        }</div></div><p>t///</p>"}]}],"_substeps":{"idx":"MY8f588fed-17e8-45b7-97f4-d2a30930be83","name":"substeps","custparents":[{"idx":"MY2a39637a-6f59-4882-93d5-b2b0a54277e8"}],"children":[{"idx":"MY71793b7b-879d-43fa-96ea-8ae5c7b5ce98","name":"make the cell (w:tc) : wxo()","custparents":[{"idx":"MY8f588fed-17e8-45b7-97f4-d2a30930be83"}],"children":[{"idx":"MY35cf9556-4b7a-4cc4-889d-88bb36e9c3d9","name":"in cell, add a property tag (w:tcPr) : wxo()","custparents":[{"idx":"MY71793b7b-879d-43fa-96ea-8ae5c7b5ce98"}],"children":[{"idx":"MYe2069221-bc5a-4b6f-8a18-7a93e52d5b46","name":"append a width tag (w:tcW) to define width of the cell: wxo()","children":[{"idx":"2ee4fd50-5392-480b-a6b6-c1f48fa57d81","name":"append a shadow tag (w:shd) to define fill color of the cell: wxo()","custparents":[{"idx":"MYe2069221-bc5a-4b6f-8a18-7a93e52d5b46"}],"children":[{"idx":"MY7815e817-e5e2-4b00-836f-29343480536b","name":"add a paragraph and text in the cell","custparents":[{"idx":"2ee4fd50-5392-480b-a6b6-c1f48fa57d81"},{"idx":"MYe2069221-bc5a-4b6f-8a18-7a93e52d5b46"}],"children":[{"idx":"MY0d2edc46-3855-49ff-a49d-7383a706fece","name":"append the cell to the row (the headrow)","custparents":[{"idx":"MY7815e817-e5e2-4b00-836f-29343480536b"}]}],"_substeps":{"idx":"MY920b7e13-de7c-42dd-86ea-2449947c5f29","name":"substeps","custparents":[{"idx":"MY7815e817-e5e2-4b00-836f-29343480536b"}],"children":[{"idx":"MYa0a95248-0587-461c-b37d-f047c90c9a08","name":"get the text value from colheads_arr","custparents":[{"idx":"MY920b7e13-de7c-42dd-86ea-2449947c5f29"}],"children":[{"idx":"MY0c9846cb-a018-4533-9f77-8928558c2427","name":"make a new paragraph with run property setting and text contents: wxp()","custparents":[{"idx":"MYa0a95248-0587-461c-b37d-f047c90c9a08"}]}]}]},"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// if header is defined, add header text</div><div class=\"ql-code-block\">            if (colheads_arr) {</div><div class=\"ql-code-block\">                // get the colhead of the corresponding column</div><div class=\"ql-code-block\">                let colheadtext = colheads_arr[col_index].colheadtext</div><div class=\"ql-code-block\">                // make a paragraph for the colheadtext</div><div class=\"ql-code-block\">                // make the font in bold style</div><div class=\"ql-code-block\">                let rPrhtml = `&lt;w:rPr&gt;</div><div class=\"ql-code-block\">                &lt;w:b/&gt;</div><div class=\"ql-code-block\">                &lt;w:sz w:val=\"24\" /&gt;</div><div class=\"ql-code-block\">                &lt;w:szCs w:val=\"24\" /&gt;&lt;/w:rPr&gt;`</div><div class=\"ql-code-block\">                let p_jq = new wxp([colheadtext], null, null, rPrhtml ).make().appendto(thecell_jq)</div><div class=\"ql-code-block\">            } // if (this.colheads_arr)</div></div><p>t///</p>"}]}],"oldparentidx":"MY35cf9556-4b7a-4cc4-889d-88bb36e9c3d9","NodeDescription":"<p>///t</p><p><br></p><p>t///</p>"}]}]}]}}]}]}]}]}],"oldparentidx":"MYe1c1fdc6-ff1a-44a8-b68a-197b54a3902e"}]}}]}]}},{"idx":"MY0f22bda5-031c-4abe-89a5-fe4c89ae1600","name":"wxtr()","custparents":[{"idx":"MY6b6a1283-871a-407a-87ed-4c5572f454cb"},{"idx":"MYbfdc9456-d20e-46ce-9bb0-a761a21efe4e"},{"idx":"MY3ee9682b-8f98-4483-b5c9-cce3814af4bf"},{"idx":"MYf763adbd-37cb-419f-9af5-6c2aa0e869ee"},{"idx":"MYd7c755e1-032e-4d88-b760-752c3e08f074"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">// make a word tbl row xml (with empty cells and paragraphs)</div><div class=\"ql-code-block\" data-language=\"plain\">function wxtr(width_cols_str, shdattrs_headrow, gridSpanAttrs, width_tbl, n_cols) {</div><div class=\"ql-code-block\" data-language=\"plain\">    this.gridSpanAttrs = gridSpanAttrs</div><div class=\"ql-code-block\" data-language=\"plain\">    this.width_cols_str = width_cols_str</div><div class=\"ql-code-block\" data-language=\"plain\">    this.shdattrs_headrow = shdattrs_headrow</div><div class=\"ql-code-block\" data-language=\"plain\">    this.width_tbl = width_tbl</div><div class=\"ql-code-block\" data-language=\"plain\">    this.n_cols = n_cols</div><div class=\"ql-code-block\" data-language=\"plain\">    this.make = function () {</div><div class=\"ql-code-block\" data-language=\"plain\">        // set default table width, and make a column width string by evenly divide width of column</div><div class=\"ql-code-block\" data-language=\"plain\">        if (!this.width_tbl) { this.width_tbl = '8000' }</div><div class=\"ql-code-block\" data-language=\"plain\">        if (!this.n_cols) { this.n_cols = 1 }</div><div class=\"ql-code-block\" data-language=\"plain\">        // make a width_cols_str according to defined table width and number of columns</div><div class=\"ql-code-block\" data-language=\"plain\">        if (this.width_tbl &amp;&amp; this.n_cols &amp;&amp; !this.width_cols_str) {</div><div class=\"ql-code-block\" data-language=\"plain\">            this.width_cols_str = ''</div><div class=\"ql-code-block\" data-language=\"plain\">            for (let i = 0; i &lt; this.n_cols; i++) {</div><div class=\"ql-code-block\" data-language=\"plain\">                this.width_cols_str = this.width_cols_str + ',' + Math.floor(parseInt(this.width_tbl) / this.n_cols).toString()</div><div class=\"ql-code-block\" data-language=\"plain\">            } // for(let i=0; i&lt;this.n_cols-1; i++)</div><div class=\"ql-code-block\" data-language=\"plain\">            // remove the heading ',' in the string</div><div class=\"ql-code-block\" data-language=\"plain\">            this.width_cols_str = this.width_cols_str.substr(1)</div><div class=\"ql-code-block\" data-language=\"plain\">        } //if (this.width_tbl &amp;&amp; this.n_cols &amp;&amp; !this.width_cols_str)</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">        // Define an array of column width values (cols_width_arr)</div><div class=\"ql-code-block\" data-language=\"plain\">        let cols_width_arr = this.width_cols_str.split(',').map(x =&gt; { return { width: x.trim() } })</div><div class=\"ql-code-block\" data-language=\"plain\">        // use cols_width_arr to make an array of empty celltext ('') </div><div class=\"ql-code-block\" data-language=\"plain\">        // in each cell, make a paragraph, and the paragraph contains a w:r nesting a w:t. </div><div class=\"ql-code-block\" data-language=\"plain\">        // the paragraph is mandated to have within the cell, otherwise WORD application reports error</div><div class=\"ql-code-block\" data-language=\"plain\">        let celltext_arr = this.width_cols_str.split(',').map(x =&gt; { return { celltext: '' } })</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">        // make the table row</div><div class=\"ql-code-block\" data-language=\"plain\">        let tr_jq = new wxo('w:tr').make()</div><div class=\"ql-code-block\" data-language=\"plain\">        // loop for each col and set col</div><div class=\"ql-code-block\" data-language=\"plain\">        let col_index = 0</div><div class=\"ql-code-block\" data-language=\"plain\">        cols_width_arr.forEach(d =&gt; {</div><div class=\"ql-code-block\" data-language=\"plain\">            // make the cells of the row</div><div class=\"ql-code-block\" data-language=\"plain\">            let thecell_jq = new wxo('w:tc').make().appendto(tr_jq)</div><div class=\"ql-code-block\" data-language=\"plain\">            // add a selector for cell property</div><div class=\"ql-code-block\" data-language=\"plain\">            let thecell_pr_jq = new wxo('w:tcPr').make()</div><div class=\"ql-code-block\" data-language=\"plain\">            thecell_jq.append(thecell_pr_jq)</div><div class=\"ql-code-block\" data-language=\"plain\">            // set width</div><div class=\"ql-code-block\" data-language=\"plain\">            thecell_pr_jq.append(new wxo('w:tcW', { 'w:w': d.width, 'w:type': 'dxa' }).make())</div><div class=\"ql-code-block\" data-language=\"plain\">            </div><div class=\"ql-code-block\" data-language=\"plain\">            // if fill is defined, set fill color</div><div class=\"ql-code-block\" data-language=\"plain\">            if (this.shdattrs_headrow) {</div><div class=\"ql-code-block\" data-language=\"plain\">                thecell_pr_jq.append(new wxo('w:shd', { ...this.shdattrs_headrow, ...{ 'w:type': 'dxa' } }).make())</div><div class=\"ql-code-block\" data-language=\"plain\">            } //if (this.shdattrs_headrow) {</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">            // in the cell property tag, add a tag(w:gridSpan) to define horizontal merging: wxo()</div><div class=\"ql-code-block\" data-language=\"plain\">            if (this.gridSpanAttrs) {thecell_pr_jq.append(new wxo('w:gridSpan',this.gridSpanAttrs).make())} //if (gridSpanAttrs)</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">            // get the text of the corresponding cell</div><div class=\"ql-code-block\" data-language=\"plain\">            let celltext = celltext_arr[col_index].celltext</div><div class=\"ql-code-block\" data-language=\"plain\">            // make a paragraph for the text, and append to the cell</div><div class=\"ql-code-block\" data-language=\"plain\">            let p_jq = new wxp([celltext]).make().appendto(thecell_jq)</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">            col_index++</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">        }) // cols_width_arr.forEach</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">        tr_jq.appendto = function (parent_jq) {</div><div class=\"ql-code-block\" data-language=\"plain\">            parent_jq.append(tr_jq)</div><div class=\"ql-code-block\" data-language=\"plain\">            update_cell_address_tbl(parent_jq)</div><div class=\"ql-code-block\" data-language=\"plain\">            return tr_jq</div><div class=\"ql-code-block\" data-language=\"plain\">        }</div><div class=\"ql-code-block\" data-language=\"plain\">        return tr_jq</div><div class=\"ql-code-block\" data-language=\"plain\">    }; // this.make (a function)</div><div class=\"ql-code-block\" data-language=\"plain\">}; // function wxtr()</div></div><p>t///</p>","children":[],"_substeps":{"idx":"MY837c1504-2a2a-484c-a1a0-ddb25af6a03b","name":"substeps","custparents":[{"idx":"MY0f22bda5-031c-4abe-89a5-fe4c89ae1600"}],"children":[{"idx":"90b69c5c-0fdd-4708-b506-5e63fee5b1da","name":"define this.vars","custparents":[{"idx":"MY837c1504-2a2a-484c-a1a0-ddb25af6a03b"}],"children":[{"idx":"d4e1e51c-82ad-4b22-9625-428df331002c","name":"this.make()","custparents":[{"idx":"90b69c5c-0fdd-4708-b506-5e63fee5b1da"}],"children":[],"_substeps":{"idx":"MYe1c1fdc6-ff1a-44a8-b68a-197b54a3902e","name":"substeps","custparents":[{"idx":"MY45176fe6-ded5-48e3-b901-a26b234cf73d"}],"children":[{"idx":"6688d5f2-f189-4d48-962b-da45f5456f63","name":"set default table width, and make a column width string by evenly divide width of column","custparents":[{"idx":"MYe1c1fdc6-ff1a-44a8-b68a-197b54a3902e"}],"children":[{"idx":"24097962-b2fb-42cc-aa26-9d82053e4e77","name":"Define an array of column width values (cols_width_arr)","custparents":[{"idx":"6688d5f2-f189-4d48-962b-da45f5456f63"},{"idx":"b201a1e6-a9ff-418f-90e2-ec047c661a9a"}],"children":[{"idx":"8b513e77-cf5f-4b2d-ae84-5aeb6e07ec82","name":"Make an array of empty ('') cell text values (celltext_arr) ","custparents":[{"idx":"24097962-b2fb-42cc-aa26-9d82053e4e77"}],"children":[{"idx":"7cd0b7a3-8514-4ee0-80cd-44ab5484ad89","name":"make the table row: wxo()","custparents":[{"idx":"8b513e77-cf5f-4b2d-ae84-5aeb6e07ec82"}],"children":[{"idx":"66d3b862-5b74-492f-a0d2-a34d389cfee5","name":"loop for each column and append cells","custparents":[{"idx":"7cd0b7a3-8514-4ee0-80cd-44ab5484ad89"}],"children":[{"idx":"ed928bf1-a9df-4a83-b0e5-1103f033afe4","name":"update_cell_ address_tbl()","custparents":[{"idx":"66d3b862-5b74-492f-a0d2-a34d389cfee5"}],"children":[{"idx":"9d4da917-d73f-46d1-829e-7b9bdc3e6749","name":"tbl_jq.appendto()","custparents":[{"idx":"ed928bf1-a9df-4a83-b0e5-1103f033afe4"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// set the function appendto</div><div class=\"ql-code-block\">        tbl_jq.appendto = function (parent_jq) {</div><div class=\"ql-code-block\">            parent_jq.append(tbl_jq)</div><div class=\"ql-code-block\">            return tbl_jq</div><div class=\"ql-code-block\">        }</div></div><p>t///</p>"}]}],"_substeps":{"idx":"MY8f588fed-17e8-45b7-97f4-d2a30930be83","name":"substeps","children":[{"idx":"MY71793b7b-879d-43fa-96ea-8ae5c7b5ce98","name":"make the cell (w:tc) and append to the cell : wxo()","custparents":[{"idx":"MY8f588fed-17e8-45b7-97f4-d2a30930be83"}],"children":[{"idx":"MY35cf9556-4b7a-4cc4-889d-88bb36e9c3d9","name":"in cell, add a property tag (w:tcPr) : wxo()","custparents":[{"idx":"MY71793b7b-879d-43fa-96ea-8ae5c7b5ce98"}],"children":[{"idx":"db22f464-9425-4b09-90e9-d72cff9f9813","name":"append a width tag (w:tcW) to define width of the cell: wxo()","custparents":[{"idx":"MY35cf9556-4b7a-4cc4-889d-88bb36e9c3d9"}],"children":[{"idx":"MYe2069221-bc5a-4b6f-8a18-7a93e52d5b46","name":"append a shadow tag (w:shd) to define fill color of the cell: wxo()","custparents":[{"idx":"db22f464-9425-4b09-90e9-d72cff9f9813"},{"idx":"MY35cf9556-4b7a-4cc4-889d-88bb36e9c3d9"}],"children":[{"idx":"MY9f95bc78-c744-4f84-b7b0-cdad2503f7c6","name":"in the cell property tag, add a tag(w:gridSpan) to define horizontal merging: wxo()","custparents":[{"idx":"MYe2069221-bc5a-4b6f-8a18-7a93e52d5b46"}],"children":[{"idx":"MY7815e817-e5e2-4b00-836f-29343480536b","name":"add a paragraph and text in the cell","children":[{"idx":"MY0d2edc46-3855-49ff-a49d-7383a706fece","name":"append the cell to the row (the headrow)","custparents":[{"idx":"MY7815e817-e5e2-4b00-836f-29343480536b"}]}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// if header is defined, add header text</div><div class=\"ql-code-block\">            if (colheads_arr) {</div><div class=\"ql-code-block\">                // get the colhead of the corresponding column</div><div class=\"ql-code-block\">                let colheadtext = colheads_arr[col_index].colheadtext</div><div class=\"ql-code-block\">                // make a paragraph for the colheadtext</div><div class=\"ql-code-block\">                // make the font in bold style</div><div class=\"ql-code-block\">                let rPrhtml = `&lt;w:rPr&gt;</div><div class=\"ql-code-block\">                &lt;w:b/&gt;</div><div class=\"ql-code-block\">                &lt;w:sz w:val=\"24\" /&gt;</div><div class=\"ql-code-block\">                &lt;w:szCs w:val=\"24\" /&gt;&lt;/w:rPr&gt;`</div><div class=\"ql-code-block\">                let p_jq = new wxp([colheadtext], null, null, rPrhtml ).make().appendto(thecell_jq)</div><div class=\"ql-code-block\">            } // if (this.colheads_arr)</div></div><p>t///</p>","custparents":["MY9f95bc78-c744-4f84-b7b0-cdad2503f7c6"],"_substeps":{"idx":"MY920b7e13-de7c-42dd-86ea-2449947c5f29","name":"substeps","custparents":[{"idx":"MY7815e817-e5e2-4b00-836f-29343480536b"}],"children":[{"idx":"MYa0a95248-0587-461c-b37d-f047c90c9a08","name":"get the text value from colheads_arr","custparents":[{"idx":"MY920b7e13-de7c-42dd-86ea-2449947c5f29"}],"children":[{"idx":"MY0c9846cb-a018-4533-9f77-8928558c2427","name":"make a new paragraph with run property setting and text contents and append to the cell: wxp()","custparents":[{"idx":"MYa0a95248-0587-461c-b37d-f047c90c9a08"}]}]}]}}]}],"oldparentidx":"db22f464-9425-4b09-90e9-d72cff9f9813"}]}]}]}]}}]}]}]}]}]}}]}]}},{"idx":"MY1c33ab7e-4345-4e4a-a4b7-67b0e8ac65d9","name":"update_cell_ address_tbl()","custparents":[{"idx":"MY6b6a1283-871a-407a-87ed-4c5572f454cb"},{"idx":"MYd480b691-d3c5-4d06-863e-30a380324b95"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// update the address of each cell (like '1,1' for r1c1) in a table</div><div class=\"ql-code-block\">function update_cell_address_tbl(tbl_jq) {</div><div class=\"ql-code-block\">    let rows_credientail_jq = tbl_jq.find('w\\\\:tr')</div><div class=\"ql-code-block\">    for (let i = 0; i &lt; rows_credientail_jq.length; i++) {</div><div class=\"ql-code-block\">        let therow_jq = $(rows_credientail_jq[i])</div><div class=\"ql-code-block\">        // find the cells</div><div class=\"ql-code-block\">        let cells_therow_jq = therow_jq.find('w\\\\:tc')</div><div class=\"ql-code-block\">        for (let j = 0; j &lt; cells_therow_jq.length; j++) {</div><div class=\"ql-code-block\">            let thecell_jq = $(cells_therow_jq[j])</div><div class=\"ql-code-block\">            thecell_jq.attr('address', (i + 1).toString() + \",\" + (j + 1).toString())</div><div class=\"ql-code-block\">        } //for (let j=0;j&lt;cells_therow_jq.length;j++)</div><div class=\"ql-code-block\">    } //for (let i=0;i&lt;rows_credientail.length;i++)</div><div class=\"ql-code-block\">} //function update_address_tbl(tbl_jq)</div></div><p>t///</p>"},{"idx":"MYbff5e46b-4844-4fc4-8e23-4d29f777174f","name":"change_cell_contents()","custparents":[{"idx":"MY6b6a1283-871a-407a-87ed-4c5572f454cb"},{"idx":"MYbfdc9456-d20e-46ce-9bb0-a761a21efe4e"},{"idx":"MYf763adbd-37cb-419f-9af5-6c2aa0e869ee"},{"idx":"MYd7c755e1-032e-4d88-b760-752c3e08f074"}]}],"collapsed":1},{"idx":"MYa40a6748-c20e-4347-b8b1-052fae0fd808","name":"for general purpose","custparents":[{"idx":"MY719ccc5e-0ccd-4bd8-bd3e-5d3d99da3de3"}],"children":[{"idx":"MYcc6bd1de-b24c-4aa0-b054-87f6c76d076c","name":"saveLocalTxtFile()","custparents":[{"idx":"MYa40a6748-c20e-4347-b8b1-052fae0fd808"},{"idx":"MY02d5db38-cdde-462c-b043-99b55286ba09"}],"NodeDescription":"<p>///t</p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">// save to local file</div><div class=\"ql-code-block\">async function saveLocalTxtFile(thetxtstr, targettxtfile, encoding) {</div><div class=\"ql-code-block\">    encoding = encoding || 'utf-8' // by default using utf-8</div><div class=\"ql-code-block\">    let fs = require('fs');</div><div class=\"ql-code-block\">    // use writeFileSync instead of writeFile to avoid async problems</div><div class=\"ql-code-block\">    fs.writeFileSync(targettxtfile, thetxtstr, encoding, function (err) {</div><div class=\"ql-code-block\">        if (err) { console.log(err); }</div><div class=\"ql-code-block\">    });</div><div class=\"ql-code-block\">}; // saveLocalTxtFile</div></div><p>t///</p>"}],"collapsed":1}],"collapsed":1}],"collapsed":1}